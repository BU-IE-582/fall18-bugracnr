matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
#calculate total goals
matches[,TotalGoals:=HomeGoals+AwayGoals]
# mark over under
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
#filter all NAs
matches=matches[complete.cases(matches)]
matches
merged_matches=merge(matches,pinnacle_wide,by='matchId')
merged_matches
merged_matches=merge(matches[,c("matchId", "IsOver", "over", "under")],pinnacle_wide,by='matchId')
merged_matches=merge(matches[,c("matchId", "IsOver")],pinnacle_wide,by='matchId')
merged_matches
merged_matches[,probOver:=1/over]
merged_matches[,probUnder:=1/under]
merged_matches[,totalProb:=probOver+probUnder]
merged_matches[,probOver:=probOver/totalProb]
merged_matches[,probUnder:=probUnder/totalProb]
merged_matches=merged_matches[complete.cases(merged_matches)]
merged_matches[,totalProb:=NULL]
merged_matches
cutpoints=seq(0,1,0.05)
merged_matches[,odd_cut_over:=cut(probOver,cutpoints)]
summary_table=merged_matches[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
summary_table=merged_matches[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
summary_table
plot(summary_table[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
rm(list=ls())
gc()
#save paths of data files as strings
matches_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
#keep only unique matches
matches=unique(matches)
matches[,match_time:=anytime(date)]
#keep year data as we will use it later
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date"):=NULL]
matches
matches[,c("match_time","date","leagueId,type"):=NULL]
#load data
matches=readRDS(matches_file_path)
#keep only unique matches
matches=unique(matches)
#keep year data as we will use it later
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date","leagueId,type"):=NULL]
matches[,c("match_time","date","leagueId","type"):=NULL]
matches
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
#transform characters to numeric for scores
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
#calculate total goals
matches[,TotalGoals:=HomeGoals+AwayGoals]
# mark over under
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
#filter all NAs
matches=matches[complete.cases(matches)]
matches
matches[matches[,c("HomeGoals","AwayGoals","TotalGoals") := NULL]
)
matches[,c("HomeGoals","AwayGoals","TotalGoals") := NULL]
matches
#keep only over & under matches with 2.5 handicap
odds_ov_un=odds[betType=='ou' & totalhandicap=='2.5']
rm(odds)
gc()
#order data in ascending date & find initial and final matches
odds_ov_un=odds_ov_un[order(matchId, oddtype,bookmaker,date)]
odds_ov_un_initial=odds_ov_un[,list(start_odd=odd[1]),
by=list(matchId,oddtype,bookmaker)]
odds_ov_un_final=odds_ov_un[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
#pinnacle is the first bookmaker that I choose, first initial odds analysis
pinnacle_over_under=odds_ov_un_initial[bookmaker=='Pinnacle']
pinnacle_wide_initial=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
pinnacle_initial=merge(matches[,c("matchId", "IsOver","Year")],pinnacle_wide_initial,by='matchId')
pinnacle_initial[,probOver:=1/over]
pinnacle_initial[,probUnder:=1/under]
pinnacle_initial[,totalProb:=probOver+probUnder]
pinnacle_initial[,probOver:=probOver/totalProb]
pinnacle_initial[,probUnder:=probUnder/totalProb]
pinnacle_initial=pinnacle_initial[complete.cases(pinnacle_initial)]
pinnacle_initial[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
pinnacle_initial[,odd_cut_over:=cut(probOver,cutpoints)]
#aggregate analysis
pinnacle_initial_summary=pinnacle_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(pinnacle_initial_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
pinnacle_initial_yearly_analysis=pinnacle_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
pinnacle_initial_yearly_analysis=pinnacle_initial_yearly_analysis[order(Year)]
plot(pinnacle_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
plot(pinnacle_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4, col= pinnacle_initial_yearly_analysis$Year - 2009)
abline(0,1,col='red')
plot(pinnacle_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=1, col= pinnacle_initial_yearly_analysis$Year - 2009)
abline(0,1,col='red')
#pinnacle final odds analysis
pinnacle_over_under=odds_ov_un_final[bookmaker=='Pinnacle']
pinnacle_wide_final=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
pinnacle_final=merge(matches[,c("matchId", "IsOver","Year")],pinnacle_wide_final,by='matchId')
#pinnacle final odds analysis
pinnacle_over_under=odds_ov_un_final[bookmaker=='Pinnacle']
pinnacle_wide_final=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
pinnacle_wide_final=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='final_odd')
pinnacle_final=merge(matches[,c("matchId", "IsOver","Year")],pinnacle_wide_final,by='matchId')
pinnacle_final[,probOver:=1/over]
pinnacle_final[,probUnder:=1/under]
pinnacle_final[,totalProb:=probOver+probUnder]
pinnacle_final[,probOver:=probOver/totalProb]
pinnacle_final[,probUnder:=probUnder/totalProb]
pinnacle_final=pinnacle_final[complete.cases(pinnacle_final)]
pinnacle_final[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
pinnacle_final[,odd_cut_over:=cut(probOver,cutpoints)]
pinnacle_final_summary=pinnacle_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(pinnacle_final_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
pinnacle_final_yearly_analysis=pinnacle_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
pinnacle_final_yearly_analysis=pinnacle_final_yearly_analysis[order(Year)]
plot(pinnacle_final_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#bookmaker 2: Betsafe
betsafe_over_under=odds_ov_un_initial[bookmaker=='Betsafe']
betsafe_wide_initial=dcast(betsafe_over_under,
matchId~oddtype,
value.var='start_odd')
betsafe_initial=merge(matches[,c("matchId", "IsOver","Year")],betsafe_wide_initial,by='matchId')
betsafe_initial[,probOver:=1/over]
betsafe_initial[,probUnder:=1/under]
betsafe_initial[,totalProb:=probOver+probUnder]
betsafe_initial[,probOver:=probOver/totalProb]
betsafe_initial[,probUnder:=probUnder/totalProb]
betsafe_initial=betsafe_initial[complete.cases(betsafe_initial)]
betsafe_initial[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
betsafe_initial[,odd_cut_over:=cut(probOver,cutpoints)]
#aggregate analysis
betsafe_initial_summary=betsafe_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(betsafe_initial_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
betsafe_initial_yearly_analysis=betsafe_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
betsafe_initial_yearly_analysis=betsafe_initial_yearly_analysis[order(Year)]
plot(betsafe_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=1, col= betsafe_initial_yearly_analysis$Year - 2009)
abline(0,1,col='red')
#betsafe final odds analysis
betsafe_over_under=odds_ov_un_final[bookmaker=='Betsafe']
betsafe_wide_final=dcast(betsafe_over_under,
matchId~oddtype,
value.var='final_odd')
betsafe_final=merge(matches[,c("matchId", "IsOver","Year")],betsafe_wide_final,by='matchId')
betsafe_final[,probOver:=1/over]
betsafe_final[,probUnder:=1/under]
betsafe_final[,totalProb:=probOver+probUnder]
betsafe_final[,probOver:=probOver/totalProb]
betsafe_final[,probUnder:=probUnder/totalProb]
betsafe_final=betsafe_final[complete.cases(betsafe_final)]
betsafe_final[,totalProb:=NULL]
betsafe_final[,odd_cut_over:=cut(probOver,cutpoints)]
betsafe_final_summary=betsafe_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(betsafe_final_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
betsafe_final_yearly_analysis=betsafe_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
betsafe_final_yearly_analysis=betsafe_final_yearly_analysis[order(Year)]
plot(betsafe_final_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
rm(list=ls())
gc()
pic <- readJPEG("HW2_Files/HW2_Part3.jpg")
library(jpeg)
pic <- readJPEG("HW2_Files/HW2_Part3.jpg")
getwd()
path <- "C:/IE_582_Rep/fall18-bugracnr/HW2"
setwd(path)
pic <- readJPEG("HW2_Files/HW2_Part3.jpg")
plot(pic[,,1])
plot(pic[,,2])
plot(pic[,,3])
class(pic)
typeof(pic)
str(pic)
dim(pic)
rasterImage(pic)
rasterImage(pic, 0,0,512,512)
dim(pic)[2,1]
dim(pic)[2:1]
rasterImage(pic, 1,1,512,512)
plot(1:512,1:512)
rasterImage(pic, 1,1,512,512)
plot(1:512,1:512)
rasterImage(pic, 1,1,512,512)
?image
image(pic)
image(1:512,1:512,pic)
image(1:512,1:512,pic[,,1])
x <- 1:512
y <- 1:512
x <- 1:512
y <- 1:512
plot(x,y)
rasterImage(pic, 1,1,512,512)
image(x,y,t(pic[,,1]))
image(x,y,pic[,,1])
image(x,y,pic[,,2], add = TRUE)
image(x,y,pic[,,3], add = TRUE)
image(x,y,pic[,,1])
par(new = TRUE)
image(x,y,pic[,,2])
par(new = TRUE)
image(x,y,pic[,,3])
par(new = TRUE)
plot(x,y)
image(x,y,pic[,,2])
image(x,y,pic[,,3])
image(x,y,pic[,,1])
image(x,y,pic[,,1], col = "red")
image(x,y,pic[,,1])
par(new = TRUE)
image(x,y,pic[,,2])
par(new = TRUE)
image(x,y,pic[,,3])
rgb()
rgb(pic)
rgb(pic[,,1], pic[,,2], pic[,,3])
plot(rgb(pic[,,1], pic[,,2], pic[,,3]))
plot(x,y, col = rgb(pic[,,1], pic[,,2], pic[,,3]))
image(x,y,pic[,,1], col = rgb(pic[,,1], pic[,,2], pic[,,3]))
par(mfrow = c(1,3))
image(x,y,pic[,,1])
image(x,y,pic[,,2])
image(x,y,pic[,,3])
?readJPEG
r <- pic[,,1]*255
g <- pic[,,2]*255
b <- pic[,,3]*255
image(x,y,pic[,,1], col = r)
mat <- matrix(1:512*512,512)
par(mfrow = c(1))
par(mfrow = 1)
plot(mat)
dim(mat)
mat <- matrix(1:(512*512),512)
dim(mat)
plot(mat)
par(mfrow = c(1:3))
par(mfrow = c(1,3))
pic[,,1] <- pic[,,1] + runif(512*512, min = 0, max = 0.1)
set.seed(1)
noise_1 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
dim(noise_1)
set.seed(15)
noise_1 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(73)
noise_2 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(392)
noise_3 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
pic[,,1] <- pic[,,1] + noise_1
pic[,,2] <- pic[,,2] + noise_2
pic[,,3] <- pic[,,3] + noise_3
graypic <- gray.colors(pic)
install.packages("imager")
library(imager)
graypic <- grayscale(pic)
?grayscale
plot(grayscale(pic))
plot(grayscale(pic, TRUE))
plot(grayscale(pic, drop = TRUE))
plot(grayscale(pic, method = "Luma", drop = TRUE))
a <- pic[,,1] +pic[,,2] + pic[,,3]
head(a)
rm(list=ls())
gc()
dim(pic[,,1])
library(jpeg)
library(imager)
path <- "C:/IE_582_Rep/fall18-bugracnr/HW2"
setwd(path)
pic <- readJPEG("HW2_Files/HW2_Part3.jpg")
class(pic)
typeof(pic)
str(pic)
x <- 1:512
y <- 1:512
plot(x,y)
rasterImage(pic, 1,1,512,512)
r <- pic[,,1]*255
g <- pic[,,2]*255
b <- pic[,,3]*255
image(x,y,pic[,,1])
set.seed(15)
noise_1 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
pic[,,1] <- pic[,,1] + noise_1
image(x,y,pic[,,1])
set.seed(73)
noise_2 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(392)
noise_3 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
noisy_pic <- pic
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
noisy_pic[1:5,1:5,1]
pic[1:5,1:5,1]
noise_1[1:5,1:5]
x <- 512:1
y <- 512:1
image(x,y,pic[,,1])
x <- -512:-1
y <- -512:-1
image(x,y,pic[,,1])
image(x,y,t(pic[,,1]))
y <- 1:512
image(x,y,t(pic[,,1]))
image(x,y,t(apply(pic[,,1],2,rev)))
image(x,y,t(apply(pic[,,2],2,rev)))
image(x,y,t(apply(pic[,,3],2,rev)))
image(x,y,t(apply(noisy_pic[,,1],2,rev)), col = rgb(t(apply(noisy_pic[,,1],2,rev)),0,0))
image(x,y,t(apply(noisy_pic[,,1],2,rev)), col = rgb(r,0,0))
r <- pic[,,1]
image(x,y,t(apply(noisy_pic[,,1],2,rev)), col = rgb(r,0,0))
range(pic[,,1])
pic <- readJPEG("HW2_Files/HW2_Part3.jpg")
range(pic)
range(pic[,,3])
range(pic[,,1])
range(pic[,,2])
pic[1:5,1:5,1]
r <- pic[,,1]
g <- pic[,,2]
b <- pic[,,3]
image(x,y,t(apply(pic[,,1],2,rev)), col = rgb(r,0,0))
r <- t(apply(pic[,,1],2,rev))
image(x,y,r, col = rgb(r,0,0))
g <- t(apply(pic[,,2],2,rev))
b <- t(apply(pic[,,3],2,rev))
image(x,y,g, col = rgb(0,g,0))
noisy_pic <- pic
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
rasterImage(noisy_pic, 1,1,512,512)
noisy_pic[,,1] <- max(pic[,,1] + noise_1,1)
noisy_pic[,,2] <- max(pic[,,2] + noise_2,1)
noisy_pic[,,3] <- max(pic[,,3] + noise_3,1)
rasterImage(noisy_pic, 1,1,512,512)
range(noisy_pic)
range(pic)
range(noise_1)
one_matrix <- matrix(seq(1:1, 512*512), 512)
one_matrix[1:5,1:5]
one_matrix <- matrix(seq(1,1, 512*512), 512)
one_matrix[1:5,1:5]
one_matrix <- matrix(rep(1,512*512), 512)
one_matrix[1:5,1:5]
noisy_pic[,,1] <- max(pic[,,1] + noise_1,1)
noisy_pic[,,2] <- max(pic[,,2] + noise_2,1)
noisy_pic[,,3] <- max(pic[,,3] + noise_3,1)
range(noisy_pic)
noisy_pic[,,1] <- max(pic[,,1] + noise_1,one_matrix)
noisy_pic[,,2] <- max(pic[,,2] + noise_2,one_matrix)
noisy_pic[,,3] <- max(pic[,,3] + noise_3,one_matrix)
range(noisy_pic)
set.seed(1)
noise_1 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(2)
noise_2 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(3)
noise_3 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
noisy_pic <- pic
noisy_pic[,,1] <- max(pic[,,1] + noise_1,one_matrix)
noisy_pic[,,2] <- max(pic[,,2] + noise_2,one_matrix)
noisy_pic[,,3] <- max(pic[,,3] + noise_3,one_matrix)
range(noisy_pic)
range(pic)
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
range(noisy_pic)
noisy_pic$1
noisy_pic <- noisypic[noisy_pic[,,1] >1,1]
noisy_pic[,,1] <- min(pic[,,1] + noise_1,1)
noisy_pic[,,2] <- min(pic[,,2] + noise_2,1)
noisy_pic[,,3] <- min(pic[,,3] + noise_3,1)
range(noisy_pic)
range(pic)
range(noisy_pic)
noisy_pic[1:5,1:5,1]
noisy_pic[,,1] <- min(pic[,,1] + noise_1,one_matrix)
range(noisy_pic[1:5,1:5,1])
noisy_pic[1:5,1:5,1]
noisy_pic[,,1] <- pic[,,1] + noise_1
range(noisy_pic[1:5,1:5,1])
noisy_pic[1:5,1:5,1]
range(noisy_pic)
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
range(noisy_pic)
?apply
noisy_pic <- apply(noisy_pic,2, min(noisy_pic,1))
noisy_pic <- apply(noisy_pic,2, min, noisy_pic,1)
range(noisy_pic)
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic <- pic
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
range(noisy_pic)
max(noisy_pic)
noisy_oic <- noisy_pic/max(noisy_pic)
noisy_pic <- noisy_pic/max(noisy_pic)
range(noisy_pic)
rasterImage(noisy_pic, 1,1,512,512)
rasterImage(noisy_pic, 1,1,512,512)
grayscale_pic <- grayscale(noisy_pic, method = "Luma")
r <- channel(pic, "r")
grayscale_pic <- 0.21*noisy_pic[,,1]+0.71*noisy_pic[,,2]+0.07*noisy_pic[,,3]
image(grayscale_pic)
install.packages("EBImage")
plot(x,y)
x <- 1:512
y <- 1:512
plot(x,y)
x <- 1:512
y <- 1:512
plot(x,y)
base::plot(x,y)
rm(list=ls())
gc()
library(jpeg)
library(imager)
path <- "C:/IE_582_Rep/fall18-bugracnr/HW2"
setwd(path)
pic <- readJPEG("HW2_Files/HW2_Part3.jpg")
class(pic)
typeof(pic)
str(pic)
range(pic[,,2])
x <- 1:512
y <- 1:512
rasterImage(pic, 1,1,512,512)
plot(x,y)
rasterImage(pic, 1,1,512,512)
set.seed(1)
noise_1 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(2)
noise_2 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(3)
noise_3 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
noisy_pic <- pic
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
noisy_pic <- noisy_pic/max(noisy_pic)
plot(x,y)
jpeg("HW2_Files/Noisy_Pic.jpg")
rasterImage(noisy_pic, 1,1,512,512)
plot(x,y)
rasterImage(noisy_pic, 1,1,512,512)
dev.off()
