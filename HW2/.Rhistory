#get pinnacle initial over under odds
pinnacle_over_under=odds_ov_un_initial[bookmaker=='Pinnacle']
pinnacle_wide=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
# join odds with matches
merged_matches=merge(matches,pinnacle_wide,by='matchId')
merged_matches[,probOver:=1/over]
merged_matches[,probUnder:=1/under]
merged_matches[,totalProb:=probOver+probUnder]
merged_matches[,probOver:=probOver/totalProb]
merged_matches[,probUnder:=probUnder/totalProb]
merged_matches[,odd_cut_over:=cut(probOver,cutpoints)]
cutpoints=seq(0,1,0.05)
merged_matches[,odd_cut_over:=cut(probOver,cutpoints)]
summary_table=merged_matches[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
summary_table=summary_table[order(Year)]
matches_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
str(matches)
matches=unique(matches)
zero_zero_matches=matches[score=='0:0']
#transform unix time to date
matches[,match_date:=anydate(date)]
#transform unix time to date time
matches[,match_time:=anytime(date)]
#order by home team and match date (decreasing)
matches=matches[order(home,-match_time)]
#only one column deletion
matches[,date:=NULL]
#only delete any number of columns
matches[,c("match_date","date"):=NULL]
#matches[,3,with=F]
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
matches[,Year:=year(match_time)]
matches[,Month:=month(match_time)]
matches[,Weekday:=wday(match_time)]
matches[,Hour:=hour(match_time)]
#transform characters to numeric for scores
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
#calculate total goals
matches[,TotalGoals:=HomeGoals+AwayGoals]
# mark over under
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
#alternative
matches[,IsOverAlt:=as.numeric(TotalGoals>2)]
#filter na scores
matches[is.na(score)]
#filter all NAs
matches=matches[complete.cases(matches)]
#yearly average goals
yearly_goals=matches[,list(AvgGoals=mean(TotalGoals)),by=list(Year)]
#yearly hourly average goals
yearly_hourly_goals=matches[,list(AvgGoals=mean(TotalGoals),
MaxGoals=max(TotalGoals),
NGames=.N, AltNGames=length(matchId)),
by=list(Year,Hour)]
#get the game with the max total goals
max_game=matches[,list(MaxGoals=max(TotalGoals),
homeMax=home[which.max(TotalGoals)],
awayMax=away[which.max(TotalGoals)]),
by=list(Year,Hour)]
#get the game with the max total goals for Year greater than 2017
max_game=matches[Year>2017,list(MaxGoals=max(TotalGoals),
homeMax=home[which.max(TotalGoals)],
awayMax=away[which.max(TotalGoals)]),
by=list(Year,Hour)]
#filter over under 2.5
odds_ov_un=odds[betType=='ou' & totalhandicap=='2.5']
#remove total handicap
odds_ov_un[,totalhandicap:=NULL]
#remove original odds data
rm(odds); gc();
#order data in ascending date
odds_ov_un=odds_ov_un[order(matchId, oddtype,bookmaker,date)]
odds_ov_un_initial=odds_ov_un[,list(start_odd=odd[1]),
by=list(matchId,oddtype,bookmaker)]
odds_ov_un_final=odds_ov_un[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
#transform to wide format
wide_odds_initial=dcast(odds_ov_un_initial,
matchId~oddtype+bookmaker,
value.var='start_odd')
#transform to long
long_ov_un_initial=melt(wide_odds_initial,id.vars=1,
measure.vars=2:ncol(wide_odds_initial))
#get pinnacle initial over under odds
pinnacle_over_under=odds_ov_un_initial[bookmaker=='Pinnacle']
pinnacle_wide=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
# join odds with matches
merged_matches=merge(matches,pinnacle_wide,by='matchId')
#setkey(matches,matchId)
#setkey(pinnacle_wide,matchId)
#joined_matches=pinnacle_wide[matches]
merged_matches[,probOver:=1/over]
merged_matches[,probUnder:=1/under]
merged_matches[,totalProb:=probOver+probUnder]
merged_matches[,probOver:=probOver/totalProb]
merged_matches[,probUnder:=probUnder/totalProb]
merged_matches=merged_matches[complete.cases(merged_matches)]
merged_matches[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
merged_matches[,odd_cut_over:=cut(probOver,cutpoints)]
summary_table=merged_matches[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
summary_table=summary_table[order(Year)]
plot(summary_table[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
rm(list=ls())
gc()
library(dplyr)
require(data.table)
require(anytime)
#save paths of data files as strings
matches_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
str(matches)
str(unique(matches))
#keep only unique matches
matches=unique(matches)
#keep only over & under matches with 2.5 handicap
odds_ov_un=odds[betType=='ou' & totalhandicap=='2.5']
head(odds_ov_un)
str(odds_ov_un)
str(matches)
rm(odds)
gc()
#order data in ascending date & find initial and final matches
odds_ov_un=odds_ov_un[order(matchId, oddtype,bookmaker,date)]
odds_ov_un_initial=odds_ov_un[,list(start_odd=odd[1]),
by=list(matchId,oddtype,bookmaker)]
odds_ov_un_final=odds_ov_un[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_odds_initial=dcast(odds_ov_un_initial,
matchId~oddtype+bookmaker,
value.var='start_odd')
head(wide_odds_initial)
long_ov_un_initial=melt(wide_odds_initial,id.vars=1,
measure.vars=2:ncol(wide_odds_initial))
head(long_ov_un_initial)
pinnacle_over_under=odds_ov_un_initial[bookmaker=='Pinnacle']
pinnacle_wide=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
head(pinnacle_wide)
pinnacle_over_under=odds_ov_un_initial[bookmaker=='Pinnacle']
head(pinnacle_over_under)
odds_ov_un
odds_ov_un_final
head(wide_odds_initial)
head(pinnacle_wide)
head(pinnacle_over_under)
merged_matches=merge(matches,pinnacle_wide,by='matchId')
merged_matches
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
#transform characters to numeric for scores
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
#calculate total goals
matches[,TotalGoals:=HomeGoals+AwayGoals]
# mark over under
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
#filter all NAs
matches=matches[complete.cases(matches)]
matches
merged_matches=merge(matches,pinnacle_wide,by='matchId')
merged_matches
merged_matches=merge(matches[,c("matchId", "IsOver", "over", "under")],pinnacle_wide,by='matchId')
merged_matches=merge(matches[,c("matchId", "IsOver")],pinnacle_wide,by='matchId')
merged_matches
merged_matches[,probOver:=1/over]
merged_matches[,probUnder:=1/under]
merged_matches[,totalProb:=probOver+probUnder]
merged_matches[,probOver:=probOver/totalProb]
merged_matches[,probUnder:=probUnder/totalProb]
merged_matches=merged_matches[complete.cases(merged_matches)]
merged_matches[,totalProb:=NULL]
merged_matches
cutpoints=seq(0,1,0.05)
merged_matches[,odd_cut_over:=cut(probOver,cutpoints)]
summary_table=merged_matches[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
summary_table=merged_matches[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
summary_table
plot(summary_table[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
rm(list=ls())
gc()
#save paths of data files as strings
matches_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
#keep only unique matches
matches=unique(matches)
matches[,match_time:=anytime(date)]
#keep year data as we will use it later
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date"):=NULL]
matches
matches[,c("match_time","date","leagueId,type"):=NULL]
#load data
matches=readRDS(matches_file_path)
#keep only unique matches
matches=unique(matches)
#keep year data as we will use it later
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date","leagueId,type"):=NULL]
matches[,c("match_time","date","leagueId","type"):=NULL]
matches
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
#transform characters to numeric for scores
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
#calculate total goals
matches[,TotalGoals:=HomeGoals+AwayGoals]
# mark over under
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
#filter all NAs
matches=matches[complete.cases(matches)]
matches
matches[matches[,c("HomeGoals","AwayGoals","TotalGoals") := NULL]
)
matches[,c("HomeGoals","AwayGoals","TotalGoals") := NULL]
matches
#keep only over & under matches with 2.5 handicap
odds_ov_un=odds[betType=='ou' & totalhandicap=='2.5']
rm(odds)
gc()
#order data in ascending date & find initial and final matches
odds_ov_un=odds_ov_un[order(matchId, oddtype,bookmaker,date)]
odds_ov_un_initial=odds_ov_un[,list(start_odd=odd[1]),
by=list(matchId,oddtype,bookmaker)]
odds_ov_un_final=odds_ov_un[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
#pinnacle is the first bookmaker that I choose, first initial odds analysis
pinnacle_over_under=odds_ov_un_initial[bookmaker=='Pinnacle']
pinnacle_wide_initial=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
pinnacle_initial=merge(matches[,c("matchId", "IsOver","Year")],pinnacle_wide_initial,by='matchId')
pinnacle_initial[,probOver:=1/over]
pinnacle_initial[,probUnder:=1/under]
pinnacle_initial[,totalProb:=probOver+probUnder]
pinnacle_initial[,probOver:=probOver/totalProb]
pinnacle_initial[,probUnder:=probUnder/totalProb]
pinnacle_initial=pinnacle_initial[complete.cases(pinnacle_initial)]
pinnacle_initial[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
pinnacle_initial[,odd_cut_over:=cut(probOver,cutpoints)]
#aggregate analysis
pinnacle_initial_summary=pinnacle_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(pinnacle_initial_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
pinnacle_initial_yearly_analysis=pinnacle_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
pinnacle_initial_yearly_analysis=pinnacle_initial_yearly_analysis[order(Year)]
plot(pinnacle_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
plot(pinnacle_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4, col= pinnacle_initial_yearly_analysis$Year - 2009)
abline(0,1,col='red')
plot(pinnacle_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=1, col= pinnacle_initial_yearly_analysis$Year - 2009)
abline(0,1,col='red')
#pinnacle final odds analysis
pinnacle_over_under=odds_ov_un_final[bookmaker=='Pinnacle']
pinnacle_wide_final=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
pinnacle_final=merge(matches[,c("matchId", "IsOver","Year")],pinnacle_wide_final,by='matchId')
#pinnacle final odds analysis
pinnacle_over_under=odds_ov_un_final[bookmaker=='Pinnacle']
pinnacle_wide_final=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='start_odd')
pinnacle_wide_final=dcast(pinnacle_over_under,
matchId~oddtype,
value.var='final_odd')
pinnacle_final=merge(matches[,c("matchId", "IsOver","Year")],pinnacle_wide_final,by='matchId')
pinnacle_final[,probOver:=1/over]
pinnacle_final[,probUnder:=1/under]
pinnacle_final[,totalProb:=probOver+probUnder]
pinnacle_final[,probOver:=probOver/totalProb]
pinnacle_final[,probUnder:=probUnder/totalProb]
pinnacle_final=pinnacle_final[complete.cases(pinnacle_final)]
pinnacle_final[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
pinnacle_final[,odd_cut_over:=cut(probOver,cutpoints)]
pinnacle_final_summary=pinnacle_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(pinnacle_final_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
pinnacle_final_yearly_analysis=pinnacle_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
pinnacle_final_yearly_analysis=pinnacle_final_yearly_analysis[order(Year)]
plot(pinnacle_final_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#bookmaker 2: Betsafe
betsafe_over_under=odds_ov_un_initial[bookmaker=='Betsafe']
betsafe_wide_initial=dcast(betsafe_over_under,
matchId~oddtype,
value.var='start_odd')
betsafe_initial=merge(matches[,c("matchId", "IsOver","Year")],betsafe_wide_initial,by='matchId')
betsafe_initial[,probOver:=1/over]
betsafe_initial[,probUnder:=1/under]
betsafe_initial[,totalProb:=probOver+probUnder]
betsafe_initial[,probOver:=probOver/totalProb]
betsafe_initial[,probUnder:=probUnder/totalProb]
betsafe_initial=betsafe_initial[complete.cases(betsafe_initial)]
betsafe_initial[,totalProb:=NULL]
cutpoints=seq(0,1,0.05)
betsafe_initial[,odd_cut_over:=cut(probOver,cutpoints)]
#aggregate analysis
betsafe_initial_summary=betsafe_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(betsafe_initial_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
betsafe_initial_yearly_analysis=betsafe_initial[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
betsafe_initial_yearly_analysis=betsafe_initial_yearly_analysis[order(Year)]
plot(betsafe_initial_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=1, col= betsafe_initial_yearly_analysis$Year - 2009)
abline(0,1,col='red')
#betsafe final odds analysis
betsafe_over_under=odds_ov_un_final[bookmaker=='Betsafe']
betsafe_wide_final=dcast(betsafe_over_under,
matchId~oddtype,
value.var='final_odd')
betsafe_final=merge(matches[,c("matchId", "IsOver","Year")],betsafe_wide_final,by='matchId')
betsafe_final[,probOver:=1/over]
betsafe_final[,probUnder:=1/under]
betsafe_final[,totalProb:=probOver+probUnder]
betsafe_final[,probOver:=probOver/totalProb]
betsafe_final[,probUnder:=probUnder/totalProb]
betsafe_final=betsafe_final[complete.cases(betsafe_final)]
betsafe_final[,totalProb:=NULL]
betsafe_final[,odd_cut_over:=cut(probOver,cutpoints)]
betsafe_final_summary=betsafe_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(odd_cut_over)]
plot(betsafe_final_summary[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
#analysis by years
betsafe_final_yearly_analysis=betsafe_final[,list(empirical_over=mean(IsOver),
probabilistic_over=mean(probOver),.N),
by=list(Year,odd_cut_over)]
betsafe_final_yearly_analysis=betsafe_final_yearly_analysis[order(Year)]
plot(betsafe_final_yearly_analysis[,list(empirical_over,probabilistic_over)],cex=4)
abline(0,1,col='red')
rm(list=ls())
gc()
require(data.table)
require(anytime)
require(dplyr)
library(rgl)
setwd("C:/IE_582_Rep/fall18-bugracnr/HW2")
#save paths
matches_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date","leagueId","type"):=NULL]
#Over Under & 1x2 Results
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
matches[,TotalGoals:=HomeGoals+AwayGoals]
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
matches[,Is1 := HomeGoals > AwayGoals]
matches[,Is2 := HomeGoals < AwayGoals]
matches[,IsX := HomeGoals == AwayGoals]
matches[,results := Is1*1 + Is2*2 + IsX*3]
matches <- matches[complete.cases(matches)]
odds <- odds %>% filter(bookmaker %in% bmakers)  %>% mutate()
odds <- as.data.table(odds)
odds[order(matchId, oddtype,bookmaker,date)]
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
numna <- sapply(wide_final, function(x) sum(is.na(x)))
numna <- as.data.frame(numna)
a<- rownames(numna)
a
numna[2:nrow(numna),]
numna <- numna[2:nrow(numna),]
numna
a
length(a)
length(numna)
numna <- sapply(wide_final, function(x) sum(is.na(x)))
numna <- as.data.frame(numna)
numna <- numna[2:nrow(numna),]
numna
length(numna)
a
length(a)
numna <- sapply(wide_final, function(x) sum(is.na(x)))
numna <- as.data.frame(numna)
a<- rownames(numna)
a
length(a)
numna <- numna[1:nrow(numna),]
numna
length(numna)
numna <- data.table(a,numna)
numna
numna[order(numna)]
numna[1:50,]
numna <- numna[order(numna)]
numna[1:50,]
numna[1:295,]
numna[1:294,]
numna[1:290,]
View(numna)
bmakers <- c("10Bet", "12BET", "bet365", "Betclic", "Pinnacle")
odds <- odds %>% filter(bookmaker %in% bmakers)  %>% mutate()
odds <- as.data.table(odds)
odds <- odds[order(matchId, oddtype,bookmaker,date)]
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
numna <- sapply(wide_final, function(x) sum(is.na(x)))
numna <- as.data.frame(numna)
numna
a<- rownames(numna)
a
length(a)
numna <- numna[1:nrow(numna),]
numna
length(numna)
numna <- data.table(a,numna)
numna <- numna[order(numna)]
numna
wide_final[,c("bet365_NO", "bet365_YES", "10Bet_NO", "10Bet_YES") := NULL]
pca <- princomp(na.omit(wide_final[2:.N,2:ncol(wide_final)]))
na.omit(wide_final[2:.N,2:ncol(wide_final)])
summary(pca)
plot(pca$scores, col = matches$IsOver + 2)
plot(pca$scores, col = matches$results + 1)
plot(pca)
a <- dist(wide_final[,2:ncol(wide_final)], method = "euclidean")
fit <- cmdscale(a)
summary(fit)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='',col=1)
fit
plot(pca$scores, col = matches$IsOver + 2)
plot(pca$scores, col = matches$results + 1)
odds_pinnacle <- odds[bookmaker == "Pinnacle"]
odds_pinnacle_final=odds_pinnacle[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_pinnacle_final <- dcast(odds_pinnacle_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
odds_pinnacle <- odds_pinnacle[order(matchId, bookmaker, oddtype, date)]
odds_pinnacle_final=odds_pinnacle[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_pinnacle_final <- dcast(odds_pinnacle_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
pca <- princomp(na.omit(wide_pinnacle_final[2:.N,2:ncol(wide_pinnacle_final)]))
plot(pca$scores, col = matches$IsOver + 2)
plot(pca$scores, col = matches$results + 1)
a <- dist(wide_pinnacle_final[,2:ncol(wide_pinnacle_final)], method = "manhattan")
fit <- cmdscale(a)
summary(fit)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='')
odds_12BET <- odds[bookmaker == "12BET"]
odds_12BET <- odds_12BET[order(matchId, bookmaker, oddtype, date)]
odds_12BET_final=odds_12BET[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_12BET_final <- dcast(odds_12BET_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
pca <- princomp(na.omit(wide_12BET_final[2:.N,2:ncol(wide_12BET_final)]))
plot(pca$scores, col = matches$IsOver + 2)
plot(pca$scores, col = matches$results + 1)
