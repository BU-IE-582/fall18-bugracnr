bmakers <- c("Betsafe", "12BET", "bet365", "Betclic", "Pinnacle")
bettypes <- unique(odds$betType)
bettypes <- bettypes[c(-2, -6)]
odds_ou <- odds%>% filter(bookmaker %in% bmakers, betType == "ou", totalhandicap == "2.5") %>% mutate()
odds <- odds %>% filter(bookmaker %in% bmakers, betType %in%bettypes)  %>% mutate()
odds <- rbind(odds,odds_ou)
odds <- as.data.table(odds)
odds <- odds[order(matchId, oddtype,bookmaker,date)]
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
numna <- sapply(wide_final, function(x) sum(is.na(x)))
numna <- as.data.frame(numna)
a<- rownames(numna)
numna <- numna[1:nrow(numna),]
numna <- data.table(a,numna)
numna <- numna[order(numna)]
wide_final[,c("bet365_NO", "bet365_YES", "Betsafe_NO", "Betsafe_YES") := NULL]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
wide_final[2:.N,2:ncol(wide_final)])
na.omit(wide_final[2:.N,2:ncol(wide_final)])
wide_final[,c("bet365_NO", "bet365_YES", "Betsafe_NO", "Betsafe_YES") := NULL]
na.omit(wide_final[2:.N,2:ncol(wide_final)])
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
pca <- princomp(na.omit(wide_final[2:.N,2:ncol(wide_final)]))
summary(pca)
plot(pca)
summary(pca)
pca
summary(pca)
plot(pca$scores, col = matches$IsOver + 2)
plot(pca$scores, col = matches$results + 1)
plot(pca)
a <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "euclidean")
fit <- cmdscale(a)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='',col=1)
a <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "manhattan")
fit <- cmdscale(a)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='',col=1)
pca$loadings
pca$loadings[,1:2]
results <- pca$loadings[,1:2]
results <- as.data.table(results)
results
results[order("Comp. 1", "Comp. 2")]
results[order(c("Comp. 1", "Comp. 2")]
results[order("Comp. 1", "Comp. 2")]
results
results <- pca$loadings[,1:2]
results
summary(pca)
res <- as.data.frame(summary(pca))
res
res <- as.list(summary(pca))
res
res <- as.data.frame(res)
res$loadings
str(pca)
summary(pca)
plot(pca)
plot(pca)
summary(pca)
pca$loadings
results <- pca$loadings[,1:2]
results
biplot(pca)
rnames <- rownames(results)
rnames
results <- pca$loadings[1,1:2]
results
results <- pca$loadings[,1:2]
results <- [1:nrow(results),]
results <- results[1:nrow(results),]
results <- data.table(rnames,results)
results
results[order("Comp.1, Comp.2")]
results <- results[order("Comp.1, Comp.2")]
results
results <- pca$loadings[,1:2]
results
plot(results     )
manhattan_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "manhattan")
euclidean_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "euclidean")
fit <- cmdscale(manhattan_distances)
na.omit(wide_final[2:.N,2:ncol(wide_final)])
wide_final[complete.cases(wide_final)]
pca <- princomp(na.omit(wide_final[2:.N,]))
wide_final[2:.N,2:ncol(wide_final)]
wide_final[1,1]
wide_final[1,]
wide_final[,1]
pca <- princomp(na.omit(wide_final[,2:ncol(wide_final)]))
na.omit(wide_final[,2:ncol(wide_final)])
wide_final
wide_final <- wide_final[complete.cases(wide_final)]
pca <- princomp(wide_final[,2:ncol(wide_final)])
biplot(pca)
summary(pca)
wide_final
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver, Results")], by = "matchId")
matches
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver, results")], by = "matchId")
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
match_colors
wide_final
matches
match_colors
matches <- matches[complete.cases(matches)]
matches
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
match_colors
wide_final
identical(wide_final$matchId, match_colors$matchId)
match_colors$control <- match_colors$matchId == wide_final$matchId
match_colors
View(match_colors)
matches <- unique(matches)
matches <- matches[complete.cases(matches)]
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
identical(wide_final$matchId, match_colors$matchId)
match_colors$control <- match_colors$matchId == wide_final$matchId
match_colors
matches <- unique(matches)
matches <- matches[complete.cases(matches)]
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
identical(wide_final$matchId, match_colors$matchId)
match_colors
wide_final
odds <- unique(odds)
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
wide_final[,c("bet365_NO", "bet365_YES", "Betsafe_NO", "Betsafe_YES") := NULL]
wide_final <- wide_final[complete.cases(wide_final)]
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
identical(wide_final$matchId, match_colors$matchId)
wide_final
wide_final <- wide_final[complete.cases(wide_final)]
wide_final
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
match_colors
wide_final <- unique(wide_final)
wide_final
rm(list=ls())
gc()
#save paths
matches_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date","leagueId","type"):=NULL]
#Over Under & 1x2 Results
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
matches[,TotalGoals:=HomeGoals+AwayGoals]
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
matches[,Is1 := HomeGoals > AwayGoals]
matches[,Is2 := HomeGoals < AwayGoals]
matches[,IsX := HomeGoals == AwayGoals]
matches[,results := Is1*1 + Is2*2 + IsX*3]
matches <- unique(matches)
matches <- matches[complete.cases(matches)]
bmakers <- c("Betsafe", "12BET", "bet365", "Betclic", "Pinnacle")
bettypes <- unique(odds$betType)
bettypes <- bettypes[c(-2, -6)]
odds_ou <- odds%>% filter(bookmaker %in% bmakers, betType == "ou", totalhandicap == "2.5") %>% mutate()
odds <- odds %>% filter(bookmaker %in% bmakers, betType %in%bettypes)  %>% mutate()
odds <- rbind(odds,odds_ou)
odds <- as.data.table(odds)
odds <- odds[order(matchId, oddtype,bookmaker,date)]
odds <- unique(odds)
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
wide_final
numna <- sapply(wide_final, function(x) sum(is.na(x)))
numna <- as.data.frame(numna)
a<- rownames(numna)
numna <- numna[1:nrow(numna),]
numna <- data.table(a,numna)
numna <- numna[order(numna)]
numna
wide_final[,c("bet365_NO", "bet365_YES", "Betsafe_NO", "Betsafe_YES") := NULL]
wide_final <- wide_final[complete.cases(wide_final)]
wide_final <- unique(wide_final)
wide_final
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
match_colors
wide_final <- wide_final[matchId == matches$matchId]
wide_final <- wide_final[matchId %in% matches$matchId]
wide_final
match_colors
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
identical(wide_final$matchId, match_colors$matchId)
pca <- princomp(wide_final[,2:ncol(wide_final)])
plot(pca$scores, col = match_colors$IsOver + 2)
plot(pca$scores, col = match_colors$results + 1)
plot(pca$scores, col = match_colors$IsOver + 2)
manhattan_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "manhattan")
euclidean_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "euclidean")
manhattan_distances
fit <- cmdscale(manhattan_distances)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver + 2)
fit <- cmdscale(euclidean_distances)
plot(fit[,1],fit[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver + 2)
rm(list=ls())
gc()
#save paths
matches_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date","leagueId","type"):=NULL]
#Over Under & 1x2 Results
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
matches[,TotalGoals:=HomeGoals+AwayGoals]
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
matches[,Is1 := HomeGoals > AwayGoals]
matches[,Is2 := HomeGoals < AwayGoals]
matches[,IsX := HomeGoals == AwayGoals]
matches[,results := Is1*1 + Is2*2 + IsX*3]
matches <- unique(matches)
matches <- matches[complete.cases(matches)]
bmakers <- c("Betsafe", "12BET", "bet365", "Betclic", "Pinnacle")
bettypes <- unique(odds$betType)
bettypes <- bettypes[c(-2, -6)]
odds_ou <- odds%>% filter(bookmaker %in% bmakers, betType == "ou", totalhandicap == "2.5") %>% mutate()
odds <- odds %>% filter(bookmaker %in% bmakers, betType %in%bettypes)  %>% mutate()
odds <- rbind(odds,odds_ou)
odds <- as.data.table(odds)
odds <- odds[order(matchId, oddtype,bookmaker,date)]
odds <- unique(odds)
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
wide_final <- wide_final[complete.cases(wide_final)]
wide_final <- unique(wide_final)
wide_final <- wide_final[matchId %in% matches$matchId]
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
pca <- princomp(wide_final[,2:ncol(wide_final)])
biplot(pca)
summary(pca)
plot(pca)
results <- pca$loadings[,1:2]
results
plot(pca$scores, col = match_colors$IsOver + 2)
plot(pca$scores, col = match_colors$results + 1)
manhattan_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "manhattan")
euclidean_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "euclidean")
fit_manhattan <- cmdscale(manhattan_distances)
plot(fit_manhattan[,1],fit_manhattan[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver + 2)
fit_euclidean <- cmdscale(euclidean_distances)
plot(fit_euclidean[,1],fit_euclidean[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver + 2)
plot(fit_manhattan[,1],fit_manhattan[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver + 2)
plot(fit_euclidean[,1],fit_euclidean[,2],main='Location',xlab='', ylab='',col= match_colors$IsOver + 2)
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(anytime)
require(dplyr)
setwd("C:/IE_582_Rep/fall18-bugracnr/HW2")
#save paths
matches_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
matches[,match_time:=anytime(date)]
matches[,Year:=year(match_time)]
matches[,c("match_time","date","leagueId","type"):=NULL]
#Over Under & 1x2 Results
matches[,c("HomeGoals","AwayGoals"):=tstrsplit(score,':')]
matches$HomeGoals=as.numeric(matches$HomeGoals)
matches[,AwayGoals:=as.numeric(AwayGoals)]
matches[,TotalGoals:=HomeGoals+AwayGoals]
matches[,IsOver:=0]
matches[TotalGoals>2,IsOver:=1]
matches[,Is1 := HomeGoals > AwayGoals]
matches[,Is2 := HomeGoals < AwayGoals]
matches[,IsX := HomeGoals == AwayGoals]
matches[,results := Is1*1 + Is2*2 + IsX*3]
matches <- unique(matches)
matches <- matches[complete.cases(matches)]
bmakers <- c("Betsafe", "12BET", "bet365", "Betclic", "Pinnacle")
bettypes <- unique(odds$betType)
bettypes <- bettypes[c(-2, -6)]
odds_ou <- odds%>% filter(bookmaker %in% bmakers, betType == "ou", totalhandicap == "2.5") %>% mutate()
odds <- odds %>% filter(bookmaker %in% bmakers, betType %in%bettypes)  %>% mutate()
odds <- rbind(odds,odds_ou)
odds <- as.data.table(odds)
odds <- odds[order(matchId, oddtype,bookmaker,date)]
odds <- unique(odds)
odds_final=odds[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
wide_final <- dcast(odds_final,
matchId ~ bookmaker + oddtype,
value.var="final_odd")
wide_final <- wide_final[complete.cases(wide_final)]
wide_final <- unique(wide_final)
wide_final <- wide_final[matchId %in% matches$matchId]
match_colors <- merge(wide_final[,"matchId"], matches[,c("matchId", "IsOver", "results")], by = "matchId")
pca <- princomp(wide_final[,2:ncol(wide_final)])
biplot(pca, xlab = "Component 1", ylab = "Component 2")
summary(pca)
plot(pca)
pca$loadings[,1:2]
par(mfrow = c(1,2))
plot(pca$scores, col = match_colors$IsOver + 2, xlab = "Component 1", ylab = "Component 2", main = "Over/Under & PCA Results")
legend("bottomright",cex = 0.55, legend = c("Under", "Over"),
fill = 2:3)
plot(pca$scores, col = match_colors$results + 1, xlab = "Component 1", ylab = "Component 2", main = "Home/Away/Tie & PCA Results")
legend("bottomright",cex = 0.55, legend = c("Home", "Away", "Tie"),
fill = 2:4)
manhattan_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "manhattan")
euclidean_distances <- dist(na.omit(wide_final[,2:ncol(wide_final)]), method = "euclidean")
fit_manhattan <- cmdscale(manhattan_distances)
fit_euclidean <- cmdscale(euclidean_distances)
par(mfrow = c(1,2))
plot(fit_manhattan[,1],fit_manhattan[,2],main='MDS with Manhattan Distances',xlab='', ylab='',col= match_colors$IsOver + 2)
legend("bottomleft",cex = 0.55, legend = c("Under", "Over"),
fill = 2:3)
plot(fit_euclidean[,1],fit_euclidean[,2],main='MDS with Euclidean Distances',xlab='', ylab='',col= match_colors$IsOver + 2)
legend("bottomleft",cex = 0.55, legend = c("Under", "Over"),
fill = 2:3)
library(jpeg)
library(imager)
library(data.table)
path <- "C:/IE_582_Rep/fall18-bugracnr/HW2"
setwd(path)
pic <- readJPEG("HW2_Files/HW2_Part3.jpeg")
class(pic)
typeof(pic)
str(pic)
dim(pic)
range(pic)
par(mfrow = c(1,1))
x <- 1:512
y <- 1:512
plot(x,y, ann = FALSE, axes = FALSE, col = 0)
rasterImage(pic, 0,0,512,512)
r <- t(apply(pic[,,1],2,rev))
g <- t(apply(pic[,,2],2,rev))
b <- t(apply(pic[,,3],2,rev))
redPal <- colorRampPalette(c("black", "red"))
greenPal <- colorRampPalette(c("black", "green"))
bluePal <- colorRampPalette(c("black", "blue"))
par(mfrow = c(1,3))
image(r, col = redPal(256), ann = TRUE, axes = FALSE, main = "R Channel" , xlab = "",ylab = "")
image(g, col = greenPal(256), ann = TRUE, axes = FALSE, main = "G Channel" , xlab = "",ylab = "")
image(b, col = bluePal(256), ann = TRUE, axes = FALSE, main = "B Channel", xlab = "",ylab = "" )
set.seed(1)
noise_1 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(2)
noise_2 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
set.seed(3)
noise_3 <-  matrix(runif(512*512, min = 0, max = 0.1),512)
noisy_pic <- pic
noisy_pic[,,1] <- pic[,,1] + noise_1
noisy_pic[,,2] <- pic[,,2] + noise_2
noisy_pic[,,3] <- pic[,,3] + noise_3
noisy_pic <- noisy_pic/max(noisy_pic)
noisy_r <- t(apply(noisy_pic[,,1],2,rev))
noisy_g <- t(apply(noisy_pic[,,2],2,rev))
noisy_b <- t(apply(noisy_pic[,,3],2,rev))
par(mfrow = c(1,2))
plot(x,y, axes = FALSE, col = 0, xlab = "",ylab = "", main = "Noisy Image")
rasterImage(noisy_pic, 0,0,512,512)
plot(x,y, axes = FALSE ,xlab = "",ylab = "", col = 0, main = "Original Image")
rasterImage(pic, 0,0,512,512)
par(mfrow = c(1,3))
image(noisy_r, col = redPal(256), ann = TRUE, axes = FALSE, main = "R Channel" , xlab = "",ylab = "")
image(noisy_g, col = greenPal(256), ann = TRUE, axes = FALSE, main = "G Channel" , xlab = "",ylab = "")
image(noisy_b, col = bluePal(256), ann = TRUE, axes = FALSE, main = "B Channel", xlab = "",ylab = "" )
noisy_grey <- noisy_pic[,,1] + noisy_pic[,,2] + noisy_pic[,,3]
noisy_grey <- noisy_grey/max(noisy_grey)
par(mfrow = c(1,1))
plot(x,y, main = "Greyscale Image", xlab = "", ylab = "", axes = FALSE, col = 0)
rasterImage(noisy_grey,0,0,512,512)
sample_vector <- rep(NA,9)
imgdata <- rep(list(sample_vector), 510*510)
k <- 1
for (i in 2:511) {
for (j in 2:511) {
imgdata[[k]] <- as.vector(noisy_grey[(i-1):(i+1),(j-1):(j+1)])
k <- k+1
}
}
imgdata <- as.data.table(matrix(unlist(imgdata), ncol = 9, byrow = TRUE))
noisy_pca <- princomp(imgdata)
plot(noisy_pca)
summary(noisy_pca)
str(noisy_pca)
par(mfrow = c(1,4))
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Unprocessed Image", xlab = "", ylab = "")
rasterImage(noisy_grey,0,0,512,512)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 1 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_1,0,0,510,510)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 2 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_2,0,0,510,510)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 3 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_3,0,0,510,510)
score_1 <- noisy_pca$scores[,1]
score_2 <- noisy_pca$scores[,2]
score_3 <- noisy_pca$scores[,3]
score_1 <- (score_1 - min(score_1))/(max(score_1)-min(score_1))
score_2 <- (score_2 - min(score_2))/(max(score_2)-min(score_2))
score_3 <- (score_3 - min(score_3))/(max(score_3)-min(score_3))
mat_score_1 <- matrix(score_1, 510, byrow=TRUE)
mat_score_2 <- matrix(score_2, 510, byrow=TRUE)
mat_score_3 <- matrix(score_3, 510, byrow=TRUE)
par(mfrow = c(1,4))
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Unprocessed Image", xlab = "", ylab = "")
rasterImage(noisy_grey,0,0,512,512)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 1 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_1,0,0,510,510)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 2 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_2,0,0,510,510)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 3 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_3,0,0,510,510)
par(mfrow = c(1,4))
plot(1:512,1:512, ann = TRUE, axes = FALSE, col = 0, main = "Unprocessed Image", xlab = "", ylab = "")
score_1 <- noisy_pca$scores[,1]
score_2 <- noisy_pca$scores[,2]
score_3 <- noisy_pca$scores[,3]
score_1 <- (score_1 - min(score_1))/(max(score_1)-min(score_1))
score_2 <- (score_2 - min(score_2))/(max(score_2)-min(score_2))
score_3 <- (score_3 - min(score_3))/(max(score_3)-min(score_3))
mat_score_1 <- matrix(score_1, 510, byrow=TRUE)
mat_score_2 <- matrix(score_2, 510, byrow=TRUE)
mat_score_3 <- matrix(score_3, 510, byrow=TRUE)
par(mfrow = c(2,2))
plot(1:512,1:512, ann = TRUE, axes = FALSE, col = 0, main = "Unprocessed Image", xlab = "", ylab = "")
rasterImage(noisy_grey,0,0,512,512)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 1 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_1,0,0,510,510)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 2 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_2,0,0,510,510)
plot(x,y, ann = TRUE, axes = FALSE, col = 0, main = "Component 3 Reconstruction", xlab = "", ylab = "")
rasterImage(mat_score_3,0,0,510,510)
eigen_1 <- noisy_pca$loadings[,1]
eigen_2 <- noisy_pca$loadings[,2]
eigen_3 <- noisy_pca$loadings[,3]
eigen_1 <- (eigen_1 - min(eigen_1))/(max(eigen_1)-min(eigen_1))
eigen_2 <- (eigen_2 - min(eigen_2))/(max(eigen_2)-min(eigen_2))
eigen_3 <- (eigen_3 - min(eigen_3))/(max(eigen_3)-min(eigen_3))
eigenmat_1 <- matrix(eigen_1,3)
eigenmat_2 <- matrix(eigen_2,3)
eigenmat_3 <- matrix(eigen_3,3)
par(mfrow=c(1,3))
plot(1:3,1:3, ann = FALSE, axes = FALSE, col = 0, main = "Eigenvector 1", xlab = "", ylab = "")
rasterImage(eigenmat_1,0,0,3,3)
plot(1:3,1:3, ann = FALSE, axes = FALSE, col = 0, main = "Eigenvector 2", xlab = "", ylab = "")
rasterImage(eigenmat_2,0,0,3,3)
plot(1:3,1:3, ann = FALSE, axes = FALSE, col = 0, main = "Eigenvector 3", xlab = "", ylab = "")
rasterImage(eigenmat_3,0,0,3,3)
plot(eigenmat_1, pch = ".")
par(mfrow=c(1,3))
plot(1:3,1:3, ann = FALSE, axes = FALSE, col = 0, main = "Eigenvector 1", xlab = "", ylab = "")
rasterImage(eigenmat_1,0,0,3,3)
plot(1:3,1:3, ann = FALSE, axes = FALSE, col = 0, main = "Eigenvector 2", xlab = "", ylab = "")
rasterImage(eigenmat_2,0,0,3,3)
plot(1:3,1:3, ann = FALSE, axes = FALSE, col = 0, main = "Eigenvector 3", xlab = "", ylab = "")
rasterImage(eigenmat_3,0,0,3,3)
noisy_pca$loadings
eigen_1 <- noisy_pca$loadings[,1]
eigen_2 <- noisy_pca$loadings[,2]
eigen_3 <- noisy_pca$loadings[,3]
eigen_1 <- (eigen_1 - min(eigen_1))/(max(eigen_1)-min(eigen_1))
eigen_2 <- (eigen_2 - min(eigen_2))/(max(eigen_2)-min(eigen_2))
eigen_3 <- (eigen_3 - min(eigen_3))/(max(eigen_3)-min(eigen_3))
eigenmat_1 <- matrix(eigen_1,3)
eigenmat_2 <- matrix(eigen_2,3)
eigenmat_3 <- matrix(eigen_3,3)
noisy_pca$loadings[,1:3]
image(eigenmat_1)
greyPal <- colorRampPalette(c("black","grey"))
image(eigenmat_1, greyPal(256) )
image(1:9,1:9,eigenmat_1, greyPal(256) )
image(eigenmat_1, col = greyPal(256) )
par(mfrow=c(1,3))
image(eigenmat_1, col = greyPal(256), ann = TRUE, axes = FALSE, col = 0, main = "Eigenvector 1", xlab = "", ylab = "")
par(mfrow=c(1,3))
image(eigenmat_1, col = greyPal(256), ann = TRUE, axes = FALSE, main = "Eigenvector 1", xlab = "", ylab = "")
image(eigenmat_2, col = greyPal(256), ann = TRUE, axes = FALSE, main = "Eigenvector 2", xlab = "", ylab = "")
image(eigenmat_3, col = greyPal(256), ann = TRUE, axes = FALSE, main = "Eigenvector 3", xlab = "", ylab = "")
rm(list=ls())
gc()
unlink('HW2_Markdown_cache', recursive = TRUE)
?biplot
