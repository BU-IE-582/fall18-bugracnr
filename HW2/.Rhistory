require(data.table)
matches_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "C:/IE582HW1/IE582Fall2018_project_files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
matches <- readRDS(matches_file_path)
odds <- readRDS(odd_details_file_path)
str(matches)
######## remove the duplicate matches
matches <- unique(matches)
zero_zero_matches <- matches[score == '0:0']
str(zero_zero_matches)
library(anytime)
matches$matchdate <- anydate(matches$date)
##data table arsenal'e göre filtreleme. ilk kısım filtre 2. kısım hesap, 3. kısım da gruplama (GROUP_BY)
matches[home == "arsenal"]
matches$matchtime <- anytime(matches$date)
??anytime
matches[1]
matches[,2]
matches[1,2]
#iki haneli gol varsa sıkıntı yok yine çalışıyor
matches[,c("HomeGoals", "AwayGoals") := tstrsplit(score,":")]
matches <- matches[order(home,-matchtime)]
matches[,Year := year(matchtime)]
matches[,Hour := hour(matchtime)]
str(matches)
matches
#1. yol, yavaş
matches$HomeGoals <- as.numeric(matches$HomeGoals)
#2. yol, hızl
matches[,AwayGoals := as.numeric(AwayGoals)]
matches[,TotalGoals := HomeGoals+AwayGoals]
matches
matches[,isOver := 0]
matches[TotalGoals > 2, isOver :=1]
#alternative over
matches[,isOverAlt := as.numeric(TotalGoals>2)]
matches
#filter na scores
matches[is.na(score)]
#filter all na
matches[complete.cases(matches)]
##Yearly Average Goals
yearly_goals = matches[,list(AvgGoals=mean(TotalGoals)), by=list(Year)]
#similar to pivot tables / logically / .N = count entries
yearly__hourly_goals = matches[,list(MaxGoals=max(TotalGoals),
AvgGoals=mean(TotalGoals),
NGames =.N,
AltNGames = length(matchId)), by=list(Year,Hour)]
#get the game with max total goals
max_game = matches[,list(MaxGoals=max(TotalGoals),
home=home[which.max(TotalGoals)],
away=away[which.max(TotalGoals)]),
by=list(Year,Hour)]
yearly__hourly_goals
max_game
##Odds
str(odds)
odds_ov_un = odds[betType == "ou" & totalhandicap == "2.5"]
odds_ov_un = odds_ov_un[,totalhandicap:= NULL]
odds_ov_un
#### rm() & gc()
############################SADECE İLK VE SON MAÇI ALMAK RANGE() PROBLEMİMİ ÇÖZER yine de kontrol edilsin, olmadı il ve sonuncular beraber assume edilir ki mantıklı
odds_ov_un = odds_ov_un[order(matchId, oddtype, bookmaker,date)]
odds_ov_un_initial = odds_ov_un[,list(start_odd = odd[1]),by=list(matchId,oddtype,bookmaker)]
odds_ov_un_initial
odds_ov_un_final = odds_ov_un[,list(start_odd = odd[.N]),by=list(matchId,oddtype,bookmaker)]
odds_ov_un_initial
odds_ov_un_final
######WIDE LONG DÖNÜŞÜMÜ DCAST &
wide_odds_initial = dcast(odds_ov_un_initial, matchId - oddtype + bookmaker, value.var = 'start_odd')
wide_odds_initial = dcast(odds, matchId - oddtype + bookmaker, value.var = 'start_odd')
wide_odds_initial = dcast(odds_ov_un_initial, matchId - oddtype + bookmaker, value.var = 'start_odd')
### bu çalışmıyo ya ???
wide_odds_initial = dcast(odds_ov_un_initial, matchId ~ oddtype + bookmaker, value.var = 'start_odd')
~wide_odds_initial
wide_odds_initial
setkey(matches,matchId)
setkey(odds,matchId)
joined_matches = odds[matches]
joined_matches
install.packages(glmnet)
install.packages("glmnet")
require(MASS)
set.seed(71)
#generate 100 instances for class 1
mu=c(1,2)
covmat=matrix(0,2,2)
diag(covmat)=1
covmat[1,2]=0.8
covmat[2,1]=0.8
cl1=mvrnorm(100, mu, covmat)
#generate 100 instances for class 2
mu=c(1,3.3)
covmat=matrix(0,2,2)
diag(covmat)=2
covmat[1,2]=0.7
covmat[2,1]=0.7
cl2=mvrnorm(100, mu, covmat)
# concatenate row-wise (bind rows)
alldata=rbind(cl1,cl2)
# assign classes as 0 and 1)
classinfo=c(rep(0,100),rep(1,100))
# concatenate data column-wise (column bind) to add class information to data
alldata=data.frame(cbind(alldata,classinfo))
# plot data
plot(alldata[,1],alldata[,2],col=(alldata[,3]+1),pch=(alldata[,3]+1),
xlab='Dim 1',ylab='Dim 2',main='Decision Boundary')
#assign names to variables
names(alldata)=c("X1","X2","Class")
#fit linear regression model (described by Gaussian, check the help)
linearReg=glm(Class~.,'gaussian',alldata)
#get the decision boundary
decisionThreshold=0.5
slope <- coef(linearReg)[2]/(-coef(linearReg)[3])
intercept <- (coef(linearReg)[1]-decisionThreshold)/(-coef(linearReg)[3])
#draws the line given the intercept (a) and the slope (b)
abline(a=intercept, b=slope,col=4,lty=3,lwd=3)
#fit logistic regression (described by binomial, check the help)
logReg=glm(Class~.,'binomial',alldata)
slope <- coef(logReg)[2]/(-coef(logReg)[3])
intercept <- (coef(logReg)[1])/(-coef(logReg)[3])
abline(a=intercept, b=slope,col=3,lty=5,lwd=3)
legend('topleft',c('Linear Reg.','Logistic Reg.'),col=c(4,3),lty=c(3,5),lwd=c(3,3))
par(mfrow=c(1,2))
#plot fitted values for linear regression
plot(alldata[,3],linearReg$fitted.values,ylab='Fitted',xlab='Actual',main='Linear Regression Actual vs Predicted')
#plot fitted values for logistic regression
plot(alldata[,3],logReg$fitted.values,ylab='Fitted',xlab='Actual',main='Logistic Regression Actual vs Predicted')
#fit linear regression model (described by Gaussian, check the help)
noInterceptlinearReg=glm(Class~.-1,'gaussian',alldata)
nofNoiseVar=100
noiseVar=matrix(runif(nrow(alldata)*nofNoiseVar),ncol=nofNoiseVar)
alldata_with_noise=cbind(alldata,noiseVar)
noisy_logReg=glm(Class~.,'binomial',alldata_with_noise)
require(glmnet)
lassoLogReg=glmnet(as.matrix(alldata_with_noise[,-3]),alldata_with_noise[,3],
family='binomial',standardize=F)
cvLogReg=cv.glmnet(as.matrix(alldata_with_noise[,-3]),alldata_with_noise[,3],
family='binomial',standardize=F,type.measure='class')
plot(cvLogReg)
set.seed(1)
nofSamples=100
mu=c(0,0)
covMat=matrix(0,2,2)
diag(covMat)=1
covMat[1,2]=0.8
covMat[2,1]=0.8
dat=mvrnorm(nofSamples,mu,covMat)
plot(dat)
plot(dat)
colMeans(dat)
pca=princomp(dat)
plot(pca)
str(pca)
summary(pca)
par(mfrow=c(1,2))
plot(dat,ylim=c(-4,4),xlim=c(-4,4))
plot(pca$scores,ylim=c(-4,4),xlim=c(-4,4))
plot(pca)
plot(dat,ylim=c(-4,4),xlim=c(-4,4))
plot(pca$scores,ylim=c(-4,4),xlim=c(-4,4))
plot(dat,ylim=c(-4,4),xlim=c(-4,4))
rm(list=ls())
gc()
#save paths
matches_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds"
odd_details_file_path = "HW2_Files/df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds"
#load data
matches=readRDS(matches_file_path)
getwd()
getwd()
setwd("C:/IE_582_Rep/fall18-bugracnr/HW2")
#load data
matches=readRDS(matches_file_path)
odds=readRDS(odd_details_file_path)
unique(odds$bookmaker)
require(data.table)
require(anytime)
odds_subset <- odds[bookmaker = c("10Bet", "12Bet", "Betway", "Unibet", "mybet")]
odds_subset <- odds[bookmaker == c("10Bet", "12Bet", "Betway", "Unibet", "mybet")]
odds_subset <- odds[bookmaker == c("10Bet", "12Bet", "Betway", "Unibet", "mybet"),]
odds_subset <- odds[,bookmaker == c("10Bet", "12Bet", "Betway", "Unibet", "mybet")]
odds_subset <- odds[odds$bookmaker == c("10Bet", "12Bet", "Betway", "Unibet", "mybet"),]
odds_subset
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = odd )
odds_subset
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = odd)
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "odd")
wide_odds
odds_subset <- odds_subset[complete.cases(odds_subset)]
odds_subset
odds_subset
odds_subset[, time := anytime(date)]
odds_subset[, Year := year(time))]
odds_subset[, Year := year(time)]
odds_subset
odds_subset <- odds_subset[totalhandicap == "2.5"]
odds_subset
odds_subset <- odds_subset[complete.cases(odds_subset)]
odds_subset <- odds_subset[order(matchId, oddtype, bookmaker, date)]
odds_subset <- odds_subset[,list(final_odd = odd[.N]), by=list(matchId,oddtype,bookmaker)]
odds_subset
unique(odds_subset$oddtype)
odds_subset <- odds[odds$bookmaker == c("10Bet", "12Bet", "Betway", "Unibet", "mybet"),]
odds_subset[, time := anytime(date)]
odds_subset[, Year := year(time)]
odds_subset <- odds_subset[order(matchId, oddtype, bookmaker, date)]
odds_subset <- odds_subset[,list(final_odd = odd[.N]), by=list(matchId,oddtype,bookmaker)]
odds_subset <- odds_subset[complete.cases(odds_subset)]
odds_subset
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "odd")
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "final_odd")
wide_odds
wide_odds <- wide_odds[complete.cases(wide_odds)]
wide_odds
odds_subset <- odds[odds$bookmaker == c("10Bet", "12Bet", "Betway", "Pinnacle", "mybet"),]
odds_subset[, time := anytime(date)]
odds_subset[, Year := year(time)]
odds_subset <- odds_subset[order(matchId, oddtype, bookmaker, date)]
odds_subset <- odds_subset[,list(final_odd = odd[.N]), by=list(matchId,oddtype,bookmaker)]
odds_subset <- odds_subset[complete.cases(odds_subset)]
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "final_odd")
wide_odds
wide_odds <- wide_odds[complete.cases(wide_odds)]
wide_odds
odds_subset <- odds[odds$bookmaker == c("10Bet", "12Bet", "Betway", "Pinnacle", "mybet"),]
odds_subset[, time := anytime(date)]
odds_subset[, Year := year(time)]
odds_subset <- odds_subset[order(matchId, oddtype, bookmaker, date)]
odds_subset <- odds_subset[,list(final_odd = odd[.N]), by=list(matchId,oddtype,bookmaker)]
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "final_odd")
wide_odds
pca_data <- princomp(wide_odds)
odds_subset <- odds[odds$bookmaker == c("10Bet", "12Bet", "Betway", "Pinnacle", "mybet"),]
#odds_subset[, time := anytime(date)]
#odds_subset[, Year := year(time)]
#odds_subset <- odds_subset[order(matchId, oddtype, bookmaker, date)]
#odds_subset <- odds_subset[,list(final_odd = odd[.N]), by=list(matchId,oddtype,bookmaker)]
odds_subset <- odds_subset[complete.cases(odds_subset)]
odds_subset
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "final_odd")
wide_odds
odds_subset <- odds[odds$bookmaker == c("10Bet", "12Bet", "Betway", "Pinnacle", "mybet"),]
wide_odds <- dcast(odds_subset, matchId ~ bookmaker + oddtype, value.var = "final_odd")
wide_odds
install.packages("jpeg")
