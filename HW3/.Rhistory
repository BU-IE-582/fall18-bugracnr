########## Distance Measure : Euclidean
set.seed(122)
k_levels=c(1:10)
nofReplications=10
nFolds=10
indices=generateCVRuns(trainclass,nofReplications,nFolds,stratified=TRUE)
cvresult=data.table()
cv_euc_time <- system.time(
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=knn(cvtrain, cvtest,trainclass[-testindices], k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=as.numeric(as.character(predict_knn)),Real=trainclass[testindices]))
}
}
}
)
comparison <- cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
comparison <- comparison[order(Accu)]
comparison
###### Distance Measure: Manhattan
cvresult=data.table()
cv_manh_time <- system.time(
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
tclass <- trainclass[-testindices]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=nn2(cvtrain, cvtest, k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=tclass[as.vector(predict_knn$nn.idx)],
Real=trainclass[testindices]))
}
}
}
)
comparison <- cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
comparison <- comparison[order(Accu)]
comparison
## Euclidean
euc_pred_time <- system.time(predict_knn <- knn(traindata,testdata, trainclass, k=3))
Predictions=as.numeric(as.character(predict_knn))
euc_comp <- (Predictions==testclass)
table(Predictions,testclass)
accuracy <- sum(euc_comp)/length(testclass)
accuracy
manh_pred_time <- system.time(predict_knn <- nn2(traindata, testdata, k = 1))
Predictions <- trainclass[as.vector(predict_knn$nn.idx[,1])]
man_comp <- (Predictions==testclass)
table(Predictions,testclass)
accuracy <- sum(man_comp)/length(testclass)
accuracy
times <- rbind(cv_euc_time,cv_manh_time,euc_pred_time,manh_pred_time)
times[,1:3]
require(penalized)
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#Scale the data
traindata <- scale(traindata)
testdata <- scale(testdata)
#change -1 values to 0
testclass[testclass < 0] <- 0
trainclass[trainclass < 0] <- 0
#Determine optimal values for lambda 1 and lambda 2
set.seed(256)
l1 <- optL1(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic")
l2 <- optL2(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 2.5)
#Determine optimal values for lambda 1 and lambda 2
set.seed(256)
l1 <- optL1(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic")
l2 <- optL2(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 5)
#Train the Model
fused_model <- penalized(trainclass, traindata, lambda1 = l1[[1]],lambda2 = l2[[1]],fusedl = TRUE, model = "logistic")
print(paste("Lambda1 = ", l1[[1]], "Lambda2 = ", l2[[1]]))
pred_trainclass <- (predict(fused_model, traindata, trainclass) > 0.5) * 1
sum(pred_trainclass==trainclass)
table(trainclass, pred_trainclass )
pred_testclass <- (predict(fused_model, testdata, testclass) > 0.5) * 1
sum(pred_testclass == testclass)
table(testclass, pred_testclass)
fused_model
c <- coefficients(fused_model, "all")
plot(traindata[1,], type = "l", col = "red", ylim = c(min(traindata[1,], traindata[2,], c), max(traindata[1,], traindata[2,], c)))
points(traindata[2,], type = "l", col = "blue")
points(c, type = "l", col = "green")
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass_c=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass_c=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#change -1 values to 0
testclass_c[testclass_c < 0] <- 0
trainclass_c[trainclass_c < 0] <- 0
## create empty matrices
traindata_c <- matrix(0,100,96)
testdata_c <- matrix(0,100,96)
#create new data
for (i in 2:96) {
traindata_c[,i-1] <-  traindata[,i] - traindata[,i-1]
testdata_c[,i-1] <-  testdata[,i] - testdata[,i-1]
}
traindata_c[,96] <- traindata[,96]
testdata_c[,96] <- testdata[,96]
#scale the data
traindata_c <- scale(traindata_c)
testdata_c <- scale(traindata_c)
#optimize parameters and train the model
set.seed(278)
l1c <- optL1(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic")
l2c <- optL2(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 2.5)
fused_model_c <- penalized(trainclass_c, traindata_c, lambda1 = l1c[[1]],lambda2 = l2c[[1]],fusedl = TRUE, model = "logistic")
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
fused_model_c
c2 <- coefficients(fused_model_c,"all")
plot(traindata_c[2,], type = "l", col = "blue", ylim = c(min(traindata_c[1,], traindata_c[2,], c2), max(traindata_c[1,], traindata_c[2,], c2)))
points(testdata_c[5,], type = "l", col = "red")
points(c2, type = "l", col = "green")
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass_c=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass_c=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#change -1 values to 0
testclass_c[testclass_c < 0] <- 0
trainclass_c[trainclass_c < 0] <- 0
## create empty matrices
traindata_c <- matrix(0,100,96)
testdata_c <- matrix(0,100,96)
#create new data
for (i in 2:96) {
traindata_c[,i-1] <-  traindata[,i] - traindata[,i-1]
testdata_c[,i-1] <-  testdata[,i] - testdata[,i-1]
}
traindata_c[,96] <- traindata[,96]
testdata_c[,96] <- testdata[,96]
#scale the data
traindata_c <- scale(traindata_c)
testdata_c <- scale(traindata_c)
#optimize parameters and train the model
set.seed(278)
l1c <- optL1(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic")
l2c <- optL2(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 2.5)
fused_model_c <- penalized(trainclass_c, traindata_c, lambda1 = l1c[[1]],lambda2 = l2c[[1]],fusedl = TRUE, model = "logistic")
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
fused_model_c
c2 <- coefficients(fused_model_c,"all")
plot(traindata_c[2,], type = "l", col = "blue", ylim = c(min(traindata_c[1,], traindata_c[2,], c2), max(traindata_c[1,], traindata_c[2,], c2)))
points(testdata_c[5,], type = "l", col = "red")
points(c2, type = "l", col = "green")
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.525) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.525) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.4) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.4) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.25) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.25) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.15) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.15) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.1) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.1) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.15) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.15) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.2) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.2) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.3) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.3) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.7) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.7) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.9) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.9) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.8) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.8) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.7) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.7) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass_c=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass_c=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#change -1 values to 0
testclass_c[testclass_c < 0] <- 0
trainclass_c[trainclass_c < 0] <- 0
## create empty matrices
traindata_c <- matrix(0,100,96)
testdata_c <- matrix(0,100,96)
#create new data
for (i in 2:96) {
traindata_c[,i-1] <-  traindata[,i] - traindata[,i-1]
testdata_c[,i-1] <-  testdata[,i] - testdata[,i-1]
}
traindata_c[,96] <- traindata[,96]
testdata_c[,96] <- testdata[,96]
#scale the data
traindata_c <- scale(traindata_c)
testdata_c <- scale(traindata_c)
#optimize parameters and train the model
set.seed(278)
l1c <- optL1(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic", minlambda1 = 4)
l2c <- optL2(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 5)
fused_model_c <- penalized(trainclass_c, traindata_c, lambda1 = l1c[[1]],lambda2 = l2c[[1]],fusedl = TRUE, model = "logistic")
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.7) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.7) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
fused_model_c
c2 <- coefficients(fused_model_c,"all")
plot(traindata_c[2,], type = "l", col = "blue", ylim = c(min(traindata_c[1,], traindata_c[2,], c2), max(traindata_c[1,], traindata_c[2,], c2)))
points(testdata_c[5,], type = "l", col = "red")
points(c2, type = "l", col = "green")
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass_c=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass_c=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#change -1 values to 0
testclass_c[testclass_c < 0] <- 0
trainclass_c[trainclass_c < 0] <- 0
## create empty matrices
traindata_c <- matrix(0,100,96)
testdata_c <- matrix(0,100,96)
#create new data
for (i in 2:96) {
traindata_c[,i-1] <-  traindata[,i] - traindata[,i-1]
testdata_c[,i-1] <-  testdata[,i] - testdata[,i-1]
}
traindata_c[,96] <- traindata[,96]
testdata_c[,96] <- testdata[,96]
#optimize parameters and train the model
set.seed(278)
l1c <- optL1(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic")
l2c <- optL2(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 0.5)
fused_model_c <- penalized(trainclass_c, traindata_c, lambda1 = l1c[[1]],lambda2 = l2c[[1]],fusedl = TRUE, model = "logistic")
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.7) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.7) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
fused_model_c
c2 <- coefficients(fused_model_c,"all")
plot(traindata_c[2,], type = "l", col = "blue", ylim = c(min(traindata_c[1,], traindata_c[2,], c2), max(traindata_c[1,], traindata_c[2,], c2)))
points(testdata_c[5,], type = "l", col = "red")
points(c2, type = "l", col = "green")
#Determine optimal values for lambda 1 and lambda 2
set.seed(256)
l1 <- optL1(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic")
require(penalized)
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#Scale the data
traindata <- scale(traindata)
testdata <- scale(testdata)
#change -1 values to 0
testclass[testclass < 0] <- 0
trainclass[trainclass < 0] <- 0
#Determine optimal values for lambda 1 and lambda 2
set.seed(256)
l1 <- optL1(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic")
l2 <- optL2(trainclass,traindata,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 0.5)
#Train the Model
fused_model <- penalized(trainclass, traindata, lambda1 = l1[[1]],lambda2 = l2[[1]],fusedl = TRUE, model = "logistic")
pred_trainclass <- (predict(fused_model, traindata, trainclass) > 0.5) * 1
sum(pred_trainclass==trainclass)
table(trainclass, pred_trainclass )
pred_testclass <- (predict(fused_model, testdata, testclass) > 0.5) * 1
sum(pred_testclass == testclass)
table(testclass, pred_testclass)
fused_model
c <- coefficients(fused_model, "all")
plot(traindata[1,], type = "l", col = "red", ylim = c(min(traindata[1,], traindata[2,], c), max(traindata[1,], traindata[2,], c)))
points(traindata[2,], type = "l", col = "blue")
points(c, type = "l", col = "green")
fname='Files/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
trainclass_c=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
#read test data
fname='Files/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass_c=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
#change -1 values to 0
testclass_c[testclass_c < 0] <- 0
trainclass_c[trainclass_c < 0] <- 0
## create empty matrices
traindata_c <- matrix(0,100,96)
testdata_c <- matrix(0,100,96)
#create new data
for (i in 2:96) {
traindata_c[,i-1] <-  traindata[,i] - traindata[,i-1]
testdata_c[,i-1] <-  testdata[,i] - testdata[,i-1]
}
traindata_c[,96] <- traindata[,96]
testdata_c[,96] <- testdata[,96]
#optimize parameters and train the model
set.seed(278)
l1c <- optL1(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic")
l2c <- optL2(trainclass,traindata_c,fusedl = TRUE, fold = 10, model = "logistic", lambda1 = l1[[1]], minlambda2 = 0.5)
fused_model_c <- penalized(trainclass_c, traindata_c, lambda1 = l1c[[1]],lambda2 = l2c[[1]],fusedl = TRUE, model = "logistic")
#calculate results for training data
pred_trainclass_c <- (predict(fused_model_c, traindata_c, trainclass_c) > 0.5) * 1
#calculate results for test data
pred_testclass_c <- (predict(fused_model_c, testdata_c, testclass_c) > 0.5) * 1
sum(pred_trainclass_c == trainclass_c)
table(trainclass_c,pred_trainclass_c)
sum(pred_testclass_c == testclass_c)
table(testclass_c, pred_testclass_c)
fused_model_c
c2 <- coefficients(fused_model_c,"all")
plot(traindata_c[2,], type = "l", col = "blue", ylim = c(min(traindata_c[1,], traindata_c[2,], c2), max(traindata_c[1,], traindata_c[2,], c2)))
points(testdata_c[5,], type = "l", col = "red")
points(c2, type = "l", col = "green")
par(mfrow = c(2,1))
plot(traindata[1,], type = "l", col = "red", ylim = c(min(traindata[1,], traindata[2,], c), max(traindata[1,], traindata[2,], c)), xlab = "Time", ylab = "Values", main = "ECG Data & Coefficients, Original Model")
points(traindata[2,], type = "l", col = "blue")
points(c, type = "l", col = "green")
legend("bottomleft", cex = 0.3, legend = c("Class 0", "Class 1", "Coefficients"), col = c("red", "blue", "green"), pch = 1)
plot(traindata_c[2,], type = "l", col = "blue", ylim = c(min(traindata_c[1,], traindata_c[2,], c2), max(traindata_c[1,], traindata_c[2,], c2)), xlab = "Time", ylab = "Values", main = "ECG Data & Coefficients, Second Model")
points(testdata_c[5,], type = "l", col = "red")
points(c2, type = "l", col = "green")
legend("bottomleft", cex = 0.3, legend = c("Class 0", "Class 1", "Coefficients"), col = c("red", "blue", "green"), pch = 1)
