nFolds=10
indices=generateCVRuns(trainclass,nofReplications,nFolds,stratified=TRUE)
cvresult=data.table()
i<-1
j<-1
y<-1
thisReplication=indices[[i]]
testindices=thisReplication[[j]]
thisReplication
testindices
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
param_k=k_levels[y]
predict_knn=knn(cvtrain, cvtest,trainclass[-testindices], k = param_k)
predict_knn
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=as.numeric(as.character(predict_knn)),Real=trainclass[testindices]))
cvresult
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
indices=generateCVRuns(trainclass,nofReplications,nFolds,stratified=TRUE)
cvresult=data.table()
thisReplication=indices[[i]]
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
tclass <- trainclass[-testindices]
y <- 1
param_k=k_levels[y]
predict_knn=nn2(cvtrain, cvtest, k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=tclass[as.vector(predict_knn$nn.idx)],
Real=trainclass[testindices]))
cvresult
k_levels=c(1,3,5)
cvresult=data.table()
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
tclass <- trainclass[-testindices]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=nn2(cvtrain, cvtest, k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=tclass[as.vector(predict_knn$nn.idx)],
Real=trainclass[testindices]))
}
}
}
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
?nn2
rm(list=ls())
path_xtest <- gsub  ( "\\\\",  "/", "C:/IE_582_Rep/fall18-bugracnr/HW3/HW3_Files/uWaveGestureLibrary_X_TEST"   )
path_xtrain <- gsub  ( "\\\\",  "/", "C:/IE_582_Rep/fall18-bugracnr/HW3/HW3_Files/uWaveGestureLibrary_X_TRAIN"   )
path_ytest <- gsub  ( "\\\\",  "/", "C:/IE_582_Rep/fall18-bugracnr/HW3/HW3_Files/uWaveGestureLibrary_Y_TEST"   )
path_ytrain <- gsub  ( "\\\\",  "/", "C:/IE_582_Rep/fall18-bugracnr/HW3/HW3_Files/uWaveGestureLibrary_Y_TRAIN"   )
path_ztest <- gsub  ( "\\\\",  "/", "C:/IE_582_Rep/fall18-bugracnr/HW3/HW3_Files/uWaveGestureLibrary_Z_TEST"   )
path_ztrain <- gsub  ( "\\\\",  "/", "C:/IE_582_Rep/fall18-bugracnr/HW3/HW3_Files/uWaveGestureLibrary_Z_TRAIN"   )
xtest <- read.table(path_xtest)
ytest <- read.table(path_ytest)
ztest <- read.table(path_ztest)
xtrain <- read.table(path_xtrain)
ytrain <- read.table(path_ytrain)
ztrain <- read.table(path_ztrain)
x <- cumsum(unlist(xtrain[1,2:ncol(xtrain)]))
y <- cumsum(unlist(ytrain[1,2:ncol(xtrain)]))
z <- cumsum(unlist(ztrain[1,2:ncol(xtrain)]))
scatterplot3d(x,y,z)
x57 <- cumsum(unlist(xtrain[57,2:ncol(xtrain)]))
y57 <- cumsum(unlist(ytrain[57,2:ncol(xtrain)]))
z57 <- cumsum(unlist(ztrain[57,2:ncol(xtrain)]))
scatterplot3d(x57,y57,z57)
trainclass <- xtrain[,1]
testclass <- xtest[,1]
colnum <- ncol(xtrain)
testdata <- cbind(xtest[,2:colnum],ytest[,2:colnum],ztest[,2:colnum])
traindata <- cbind(xtrain[,2:colnum],ytrain[,2:colnum],ztrain[,2:colnum])
k_levels=c(1:7)
nofReplications=10
nFolds=10
indices=generateCVRuns(trainclass,nofReplications,nFolds,stratified=TRUE)
cvresult=data.table()
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=knn(cvtrain, cvtest,trainclass[-testindices], k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=as.numeric(as.character(predict_knn)),Real=trainclass[testindices]))
}
}
}
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
cvresult=data.table()
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
tclass <- trainclass[-testindices]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=nn2(cvtrain, cvtest, k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=tclass[as.vector(predict_knn$nn.idx)],
Real=trainclass[testindices]))
}
}
}
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
k_levels=c(1)
nofReplications=10
nFolds=10
indices=generateCVRuns(trainclass,nofReplications,nFolds,stratified=TRUE)
cvresult=data.table()
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=knn(cvtrain, cvtest,trainclass[-testindices], k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=as.numeric(as.character(predict_knn)),Real=trainclass[testindices]))
}
}
}
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
cvresult
table(cvresult$Predictions, cvresult$Real)
table(cvresult$Predictions, cvresult$Real)
cvresult=data.table()
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
cvtrain=traindata[-testindices,]
cvtest=traindata[testindices,]
tclass <- trainclass[-testindices]
for(y in 1:length(k_levels)){
param_k=k_levels[y]
predict_knn=nn2(cvtrain, cvtest, k = param_k)
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='knn',Klev=param_k,TestId=testindices,
Predictions=tclass[as.vector(predict_knn$nn.idx)],
Real=trainclass[testindices]))
}
}
}
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
table(cvresult$Predictions, cvresult$Real)
confusion_matrix <- table(cvresult$Predictions, cvresult$Real)
sum(diag(confusion_matrix))/sum(confusion_matrix)
accuracy <- sum(diag(confusion_matrix))/sum(confusion_matrix)
accuracy
cvresult[,list(Accu=mean(Predictions==Real)),by=list(Method,Klev)]
rm(list=ls())
qc()
gc()
gc()
install.packages("lqa")
install.packages("penalized")
set.seed(455)
#create 100 synthetic time series of length 200
nofseries=100
lenseries=200
series=matrix(rnorm(nofseries*lenseries),nrow=nofseries)
classSeries=rep(0,nofseries)
#randomly select half of them and add random values between times 41-60 to create a class with peak
selected=sample(nofseries,nofseries/2)
series[selected,41:60]=series[selected,41:60]+runif(20,4,8)
classSeries[selected]=1
#plot the series overlaid
matplot(t(series),type="l",col=classSeries+1)
#generating arbitrary lambda2 sequences
lambda2=exp (seq (-6, 1, length = 10))
print(lambda2) #check what they are
#parameters to be tried is lambda1 for L1 penalty and lambda2 for L2 (fused lasso penalty)
#fixing lambda1 to 1, I try to find the optimal lambda2 value from the sequence
lambdas=list(1,lambda2)
lambdas
fname='C:/R/ECG/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
head(traindata)
#first column is the class variable
trainclass=traindata[,1] # takes -1 and 1
trainclass
#drop first column
traindata=traindata[,2:ncol(traindata)]
traindata
print(dim(traindata)) #shows that there 100 series (rows) of length 96 time units (columns)
tlength=ncol(traindata)
noftimeseries=nrow(traindata)
#let's plot some of the time series
plot(traindata[1,])
#let's use line format
plot(traindata[1,],type='l')
#multiple plots on single plot
par(mfrow=c(2,2)) #2x2 grid
plot(traindata[1,],type='l')
plot(traindata[2,],type='l')
plot(traindata[3,],type='l')
plot(traindata[4,],type='l')
par(mfrow = c(1,1))
#let's plot them overlaid with colors representing their class
plot(traindata[1,],type='l',col=trainclass[1]+2)
points(traindata[2,],type='l',col=trainclass[2]+2)
points(traindata[3,],type='l',col=trainclass[3]+2)
points(traindata[4,],type='l',col=trainclass[4]+2)
#problem with limits?
lim=max(abs(traindata[1:4,])) #maximum of the absolute value of the observations for first 4 time series
plot(traindata[1,],type='l',col=trainclass[1]+2,ylim=c(-1.1*lim,1.1*lim))
points(traindata[2,],type='l',col=trainclass[2]+2)
points(traindata[3,],type='l',col=trainclass[3]+2)
points(traindata[4,],type='l',col=trainclass[4]+2)
#read test data
fname='C:/R/ECG/ecgTEST' # data path
#read test data
fname='C:/R/ECG/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
testclass
testclass[testclass < 0] <- *
##### dursun burada
#one option to compute Euclidean distance of first time series in test data to training
#series (inefficient)
combined=rbind(testdata[1,],traindata)
testclass[testclass < 0] <- 0
testclass
trainclass[trainclass < 0] <- 0
trainclass
traindata
#plot the series overlaid
matplot(t(series),type="l",col=classSeries+1)
require(penalized)
cvfused <- cv1(trainclass, data = traindata, lambda1 = 1, lambda2 = lambda2, fused1 = TRUE, model = "logistic", fold = 10, )
cvfused <- cvl(trainclass, data = traindata, lambda1 = 1, lambda2 = lambda2, fused1 = TRUE, model = "logistic", fold = 10, )
cvfused <- cvl(trainclass, data = traindata, lambda1 = 1, lambda2 = lambda2, model = "logistic", fold = 10, )
cvfused <- cvl(trainclass, data = traindata, lambda1 = 1, lambda2 = lambda2, fusedl = TRUE, model = "logistic", fold = 10, )
cvfused <- cvl(trainclass, data = traindata, lambda1 = 1, lambda2 = lambda2, fusedl = TRUE, model = "logistic", fold = 10 )
require(penalized)
vignette("penalized")
cvfused <- cvl(trainclass, data = traindata, lambda2 = 1, fusedl = TRUE, model = "logistic", fold = 10 )
cvfused <- cvl(trainclass, traindata, lambda2 = 1, fusedl = TRUE, model = "logistic", fold = 10 )
#generating arbitrary lambda2 sequences
l2=exp (seq (-6, 1, length = 10))
cvfused <- cvl(trainclass, traindata, lambda1 = 1, lambda2 = l2 , fusedl = TRUE, model = "logistic", fold = 10 )
cvfused <- cvl(trainclass, traindata, lambda1 = 1,fusedl = TRUE, model = "logistic", fold = 10 )
cvfused
plot(coefficients(cvfused,"all")[-1])
rm(list=ls())
fname='C:/R/ECG/ecgTRAIN' # data path
traindata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
head(traindata)
#first column is the class variable
trainclass=traindata[,1] # takes -1 and 1
#drop first column
traindata=traindata[,2:ncol(traindata)]
print(dim(traindata)) #shows that there 100 series (rows) of length 96 time units (columns)
tlength=ncol(traindata)
noftimeseries=nrow(traindata)
#let's plot some of the time series
plot(traindata[1,])
#let's use line format
plot(traindata[1,],type='l')
#multiple plots on single plot
par(mfrow=c(2,2)) #2x2 grid
plot(traindata[1,],type='l')
plot(traindata[2,],type='l')
plot(traindata[3,],type='l')
par(mfrow = c(1,1))
plot(traindata[4,],type='l')
#let's plot them overlaid with colors representing their class
plot(traindata[1,],type='l',col=trainclass[1]+2)
points(traindata[2,],type='l',col=trainclass[2]+2)
points(traindata[3,],type='l',col=trainclass[3]+2)
points(traindata[4,],type='l',col=trainclass[4]+2)
#problem with limits?
lim=max(abs(traindata[1:4,])) #maximum of the absolute value of the observations for first 4 time series
plot(traindata[1,],type='l',col=trainclass[1]+2,ylim=c(-1.1*lim,1.1*lim))
points(traindata[2,],type='l',col=trainclass[2]+2)
points(traindata[3,],type='l',col=trainclass[3]+2)
points(traindata[4,],type='l',col=trainclass[4]+2)
#read test data
fname='C:/R/ECG/ecgTEST' # data path
testdata <- as.matrix(read.table(fname))  # read data into a matrix named traindata
#first column is the class variable
testclass=testdata[,1] # takes -1 and 1
#drop first column
testdata=testdata[,2:ncol(testdata)]
testclass[testclass < 0] <- 0
trainclass[trainclass < 0] <- 0
traindata
?cvl
cvfused <- cvl(trainclass, traindata, lambda1 = 1,lambda2 = 1,fusedl = TRUE, model = "logistic", fold = 10 )
cvfused
denom <- t(cvfused$predictions)%*% traindata
denom <- exp(denom)
range(denom)
trainpred <- (1/(1+denom) > 0.5)*1
comparison <- data.frame(trainpred,trainclass)
comparison
trainpred
trainclass
trainpred <- (denom/(1+denom) > 0.5)*1
trainpred
trainpred <- (1/(1+denom) > 0.5)*1
denom
cvfused
traindata[,1]
fit <- penalized(trainclass, traindata, lambda1 = 0.5, lambda2 = 0.5, model = "logistic")
fit
traindata
t(traindata)
fit <- penalized(trainclass, t(traindata), lambda1 = 0.5, lambda2 = 0.5, model = "logistic")
trainclass
dim(trainclass)
length(trainclass)
a <- as.matrix(read.table(fname))
a
plot(traindata[1,],type='l')
traindata[1,]
plot(traindata[2,],type='l')
plot(traindata[3,],type='l')
plot(traindata[4,],type='l')
#let's plot them overlaid with colors representing their class
plot(traindata[1,],type='l',col=trainclass[1]+2)
points(traindata[2,],type='l',col=trainclass[2]+2)
points(traindata[3,],type='l',col=trainclass[3]+2)
points(traindata[4,],type='l',col=trainclass[4]+2)
fit <- penalized(trainclass, traindata, lambda1 = 0.5, lambda2 = 0.5, model = "logistic")
fit
fit <- penalized(trainclass, traindata, lambda1 = 0.75, lambda2 = 0.25, model = "logistic")
fit
coefficients(fit)
datam <- cbind(rep(1,100),traindata)
datam
coefficients(fit)
c <- coefficients(fit)
c
datam[,1] <- datam[,1] * c[1]
datam
c
cvfused
coefficients(cvfused)
fit <- penalized(trainclass, traindata, lambda1 = 0.75, lambda2 = 0.25, model = "logistic", fusedl = TRUE)
fit
c <- coefficients(fit)
c
c <- coefficients(fit,"all")
c
plot(c)
datam <- cbind(rep(1,100),traindata)
predictions <- t(c)*datam
predictions <- t(c)%*%datam
datam
t(c)
length(c)
predictions <- t(c)%*%t(datam)
predictions
predictions <- exp(predictions)
predictions
pred <- (1/(1+predictions)>0.5) * 1
pred
trainclass
trainclass - pred
comp <- (trainclass == pred)
comp
sum(comp)
pred <- (1/(1+predictions)<0.5) * 1
comp <- (trainclass == pred)
sum(comp)
length(c)
datam <- cbind(rep(1,100),testdata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
pred <- (1/(1+predictions)<0.5) * 1
comp <- (testclass == pred)
sum(comp)
fit <- penalized(trainclass, traindata, lambda1 = 1, lambda2 = 1, model = "logistic", fusedl = TRUE)
c <- coefficients(fit,"all")
plot(c)
datam <- cbind(rep(1,100),traindata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
pred <- (1/(1+predictions)<0.5) * 1
comp <- (traindata == pred)
sum(comp)
pred
traindata
comp <- (trainclass == pred)
sum(comp)
datam <- cbind(rep(1,100),testdata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
pred <- (1/(1+predictions)<0.5) * 1
comp <- (testclass == pred)
sum(comp)
cvfused <- cvl(trainclass, traindata, lambda1 = 1,lambda2 = 1,fusedl = TRUE, model = "logistic", fold = 10 )
cvfused
cvl
c
pred <- (cvfused$predictions)<0.5) * 1
pred <- (cvfused$predictions<0.5) * 1
comp <- (trainclass == pred)
sum(comp)
pred <- (cvfused$predictions>0.5) * 1
comp <- (trainclass == pred)
sum(comp)
datam <- cbind(rep(1,100),testdata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
pred <- (cvfused$predictions>0.5) * 1
comp <- (testclass == pred)
sum(comp)
cvfused$predictions
cvfused
cvfused$fullfit
coefficients(cvfused$fullfit)
coefficients(cvfused$fullfit, "all")
c <- coefficients(cvfused$fullfit, "all")
c
datam <- cbind(rep(1,100),traindata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
predictions
probabilities <- (1/(1+predictions))
probabilities
cvfused$prediction
probabilities <- 1-(1/(1+predictions))
probabilities
pred <- (probabilities>0.5) * 1
comp <- (trainclass == pred)
sum(comp)
datam <- cbind(rep(1,100),testdata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
probabilities <- 1-(1/(1+predictions))
comp <- (testclass == pred)
sum(comp)
plot(c)
c <- coefficients(cvfused$fullfit, "all")
c
plot(c)
cvl
par(mfrow = c(2,1))
plot(c)
plot(c, type = "l")
plot(c, type = "l")
plot(traindata[5,])
plot(c, type = "l")
plot(traindata[5,], type = "l")
par(mfrow = c(1,1))
plot(c, type = "l")
points(traindata[5,], type = "l")
points(traindata[5,], type = "l", col = "red")
plot(traindata[5,], type = "l", col = "red")
points(traindata[3,], type = "l", col = "blue")
points(c, type = "l")
fit <- penalized(trainclass, traindata, lambda1 = 3, lambda2 = 2, model = "logistic", fusedl = TRUE)
cvfused <- cvl(trainclass, traindata, lambda1 = 1,lambda2 = 1,fusedl = TRUE, model = "logistic", fold = 10 )
cvfused <- cvl(trainclass, traindata, lambda1 = 2,lambda2 = 3,fusedl = TRUE, model = "logistic", fold = 10 )
c <- coefficients(cvfused$fullfit, "all")
plot(c)
plot(traindata[5,], type = "l", col = "red")
points(c, type = "l")
points(traindata[3,], type = "l", col = "blue")
datam <- cbind(rep(1,100),traindata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
probabilities <- 1-(1/(1+predictions))
pred <- (probabilities>0.5) * 1
comp <- (trainclass == pred)
sum(comp)
datam <- cbind(rep(1,100),testdata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
probabilities <- 1-(1/(1+predictions))
comp <- (testclass == pred)
sum(comp)
cvfused <- cvl(trainclass, traindata, lambda1 = 0.75,lambda2 = 0.5,fusedl = TRUE, model = "logistic", fold = 10 )
c <- coefficients(cvfused$fullfit, "all")
plot(c)
plot(c)
c
plot(traindata[5,], type = "l", col = "red")
points(traindata[3,], type = "l", col = "blue")
points(c, type = "l")
datam <- cbind(rep(1,100),traindata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
probabilities <- 1-(1/(1+predictions))
pred <- (probabilities>0.5) * 1
comp <- (trainclass == pred)
sum(comp)
datam <- cbind(rep(1,100),testdata)
predictions <- t(c)%*%t(datam)
predictions <- exp(predictions)
probabilities <- 1-(1/(1+predictions))
comp <- (testclass == pred)
sum(comp)
