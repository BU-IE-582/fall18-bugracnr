table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Manh_Dist_k-medoids',Num_of_Classes = y, TestId=testindices,
Predictions=as.numeric(musk_predict),Real=testclass))
#euclidean dist hierarchical
muskfit <- cv.glmnet(train3,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test3, type = "class", s = "lambda.min")
table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Euc_Dist_Hierarchical',Num_of_Classes = y, TestId=testindices,
Predictions=as.numeric(musk_predict),Real=testclass))
#manhattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "class", s = "lambda.min")
table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Manh_Dist_Hierarchical',Num_of_Classes = y, TestId=testindices,
Predictions=as.numeric(musk_predict),Real=testclass))
}
}
}
comparison <- cvresult[,list(Accu=mean(Predictions==Real),
TPR = sum(Predictions*Real == 1)/(sum(Predictions*Real == 1)+sum(Predictions-Real == -1)),
FPR = sum(Predictions-Real == 1)/(sum(Predictions-Real == 1)+sum(Predictions+Real == 0))),by=list(Method,Num_of_Classes)]
comparison <- comparison[order(Accu)]
comparison
indices
?generateCVRuns
set.seed(270)
ncluster=c(3,6,9,12,15,18,21,24,27,30)
nofReplications=10
nFolds=5
indices=generateCVRuns(bag_classes,nofReplications,nFolds,stratified=TRUE)
cvresult=data.table()
for(i in 1:nofReplications) {
thisReplication=indices[[i]]
for(j in 1:nFolds){
testindices=thisReplication[[j]]
for(y in ncluster){
#k-medoids
euc_pam <- pam(euc_dist, y, diss = TRUE)
manh_pam <- pam(manh_dist, y, diss = TRUE)
#centroids
euc_kmeans_centroids <- muskdata[euc_pam$medoids,]
manh_kmeans_centroids <- muskdata[manh_pam$medoids,]
#distance btw instances and centroids
euc_inst_dist_pam <- as.matrix(pdist(muskdata,euc_kmeans_centroids))
manh_inst_dist_pam <- as.matrix(pdist(muskdata,manh_kmeans_centroids))
#bag distances to centroids
euc_bag_dist <- as.matrix(aggregate(euc_inst_dist_pam, list(muskId), mean))
manh_bag_dist <- as.matrix(aggregate(manh_inst_dist_pam, list(muskId), mean))
#create hierarchical clusters
euc_hclust <- hclust(euc_dist)
manh_hclust <- hclust(manh_dist)
#determine classes
manh_classes <- cutree(manh_hclust,k=y)
euc_classes <- cutree(euc_hclust,k=y)
#means are centers
euc_hclust_centers <- as.matrix(aggregate(muskdata,list(euc_classes),mean))
manh_hclust_centers <- as.matrix(aggregate(muskdata,list(manh_classes),mean))
#find distances of each instance to class centers
euc_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,euc_hclust_centers))
manh_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,manh_hclust_centers))
#bag distances to centroids
euc_hclust_bag_dist <- as.matrix(aggregate(euc_inst_dist_mat_hclust, list(muskId), mean))
manh_hclust_bag_dist <- as.matrix(aggregate(manh_inst_dist_mat_hclust, list(muskId), mean))
train1 <- euc_bag_dist[testindices,2:ncol(euc_bag_dist)]
train2 <- manh_bag_dist[testindices,2:ncol(manh_bag_dist)]
train3 <- euc_hclust_bag_dist[testindices,2:ncol(euc_hclust_bag_dist)]
train4 <- manh_hclust_bag_dist[testindices,2:ncol(manh_hclust_bag_dist)]
test1 <- euc_bag_dist[-testindices,2:ncol(euc_bag_dist)]
test2 <- manh_bag_dist[-testindices,2:ncol(manh_bag_dist)]
test3 <- euc_hclust_bag_dist[-testindices,2:ncol(euc_hclust_bag_dist)]
test4 <- manh_hclust_bag_dist[-testindices,2:ncol(manh_hclust_bag_dist)]
trainclass <- bag_classes[testindices]
testclass <- bag_classes[-testindices]
#euclidean dist k-medoids
muskfit <- cv.glmnet(train1,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test1, type = "class", s = "lambda.min")
table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Euc_Dist_k-medoids',Num_of_Classes = y, TestId=testindices,
Predictions = as.numeric(musk_predict),Real=testclass))
#manhattan dist k-medoids
muskfit <- cv.glmnet(train2,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test2, type = "class", s = "lambda.min")
table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Manh_Dist_k-medoids',Num_of_Classes = y, TestId=testindices,
Predictions=as.numeric(musk_predict),Real=testclass))
#euclidean dist hierarchical
muskfit <- cv.glmnet(train3,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test3, type = "class", s = "lambda.min")
table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Euc_Dist_Hierarchical',Num_of_Classes = y, TestId=testindices,
Predictions=as.numeric(musk_predict),Real=testclass))
#manhattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "class", s = "lambda.min")
table(musk_predict, testclass)
accuracy = sum(musk_predict==testclass)/nrow(test1)
accuracy
cvresult=rbind(cvresult,data.table(Replication=i,Fold=j,Method='Manh_Dist_Hierarchical',Num_of_Classes = y, TestId=testindices,
Predictions=as.numeric(musk_predict),Real=testclass))
}
}
}
comparison <- cvresult[,list(Accu=mean(Predictions==Real),
TPR = sum(Predictions*Real == 1)/(sum(Predictions*Real == 1)+sum(Predictions-Real == -1)),
FPR = sum(Predictions-Real == 1)/(sum(Predictions-Real == 1)+sum(Predictions+Real == 0))),by=list(Method,Num_of_Classes)]
comparison <- comparison[order(Accu)]
comparison
cvresult[,list(Accu=mean(Predictions==Real),
TPR = sum(Predictions*Real == 1)/(sum(Predictions*Real == 1)+sum(Predictions-Real == -1)),
FPR = sum(Predictions-Real == 1)/(sum(Predictions-Real == 1)+sum(Predictions+Real == 0))),by=list(Method,Num_of_Classes,Replication)]
comparison <- comparison[order(Accu)]
comparison
comp1 <- comp1[order(TPR)]
comp1 <- comparison[Method=="Euc_Dist_k-medoids"]
comp1 <- comp1[order(TPR)]
plot(comp1$FPR,comp1$TPR, type = "l")
comp1
comp1 <- comp1[order(FPR)]
plot(comp1$FPR,comp1$TPR, type = "l")
abline(a=1,b=1)
plot(comp1$FPR,comp1$TPR, type = "l", xlim = (0.3,0.9), ylim = (0.3,0.9))
plot(comp1$FPR,comp1$TPR, type = "l", xlim = c(0,1), ylim = c(0,1))
abline(a=1,b=1)
abline(a=0,b=1)
plot(comp1$FPR,comp1$TPR, type = "l")
abline(a=0,b=1)
plot(comp1$FPR,comp1$TPR, type = "l", xlim = c(0.5,1), ylim = c(0.5,1))
plot(comp1$FPR,comp1$TPR, type = "l", xlim = c(0.5,1), ylim = c(0.5,1))
plot(comp1$FPR,comp1$TPR, type = "l", xlim = c(0.2,8), ylim = c(0.2,8))
plot(comp1$FPR,comp1$TPR, type = "l", xlim = c(0.2,0.8), ylim = c(0.2,0.8))
abline(a=0,b=1)
plot(comp1$FPR,comp1$TPR, type = "l")
abline(a=0,b=1)
comparison
comp1 <- comp1[order(Num_of_Classes)]
plot(comp1$FPR,comp1$TPR, type = "l")
comp1 <- comp1[order(FPR)]
plot(comp1$FPR,comp1$TPR, type = "l")
comparison
indices
index <- sample(1:length(bag_classes), 20)
comparison
## Manhattan - K_Medoids - 27 Classes
#k-medoids
manh_pam <- pam(manh_dist, 27, diss = TRUE)
#centroids
manh_kmeans_centroids <- muskdata[manh_pam$medoids,]
#distance btw instances and centroids
manh_inst_dist_pam <- as.matrix(pdist(muskdata,manh_kmeans_centroids))
#bag distances to centroids
manh_bag_dist <- as.matrix(aggregate(manh_inst_dist_pam, list(muskId), mean))
train2 <- manh_bag_dist[index,2:ncol(manh_bag_dist)]
test2 <- manh_bag_dist[-index,2:ncol(manh_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#manhattan dist k-medoids
muskfit <- cv.glmnet(train2,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test2, type = "response", s = "lambda.min")
index
set.seed(10)
index <- sample(1:length(bag_classes), 20)
index
## Manhattan - K_Medoids - 27 Classes
#k-medoids
manh_pam <- pam(manh_dist, 27, diss = TRUE)
#centroids
manh_kmeans_centroids <- muskdata[manh_pam$medoids,]
#distance btw instances and centroids
manh_inst_dist_pam <- as.matrix(pdist(muskdata,manh_kmeans_centroids))
#bag distances to centroids
manh_bag_dist <- as.matrix(aggregate(manh_inst_dist_pam, list(muskId), mean))
train2 <- manh_bag_dist[index,2:ncol(manh_bag_dist)]
test2 <- manh_bag_dist[-index,2:ncol(manh_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#manhattan dist k-medoids
muskfit <- cv.glmnet(train2,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test2, type = "response", s = "lambda.min")
table(musk_predict, testclass)
install.packages("ROCR")
require(ROCR)
perf <- performance(prediction(preds,class), "tpr", "fpr")
perf <- performance(prediction(musk_predict,class), "tpr", "fpr")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
plot(perf)
?performance
?plot.performance
plot(perf, main = "ROC Curve K-Medoids with Manhattan Distances, 27 Clusters")
plot(perf, main = "ROC Curve, K-Medoids with Manhattan Distances, 27 Clusters")
install.packages("AUC")
require(AUC)
?AUC
perf
auc(perf[["x.values"]])
perf[["x.values"]]
?auc
auc(perf)
?auc
ModelMetrics::auc(perf)
perf
as.data.table(perf)
?performance-class
?performance
perf@x.name
perf@x.values
auc(perf@x.values,perf@y.values)
auc(perf@x.values,perf@y.values,min = 0, max = 0)
AUC::auc(perf@x.values,perf@y.values,min = 0, max = 0)
?auc
perf@y.values
?roc
musk_roc <- roc(musk_predict,testclass)
musk_predict
?performance
performance(prediction(musk_predict,testclass), "auc")
performance(musk_predict,"auc")
performance(prediction(musk_predict),"auc")
performance(prediction(musk_predict,testclass),"auc")
auc <- performance(prediction(musk_predict,testclass), method = "auc")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values
auc
auc <- auc@y.values[[1]]
auc
auc <- auc@y.values
auc
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
auc
plot(perf, main = "ROC Curve, K-Medoids with Manhattan Distances, 27 Clusters", colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with Manhattan Distances, 27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
save.image("AUC_Added_Data.Rda")
load("C:/IE_582_Rep/fall18-bugracnr/HW5/AUC_Added_Data.Rda")
require(data.table)
require(cluster)
require(kmed)
require(stats)
require(dplyr)
require(pdist)
require(glmnet)
require(caret)
require(TunePareto)
require(ROCR)
require(AUC)
cvresult
comparison
### Euc_Dist k-medoids 24 clusters
set.seed(10)
index <- sample(1:length(bag_classes), 20)
## Manhattan - K_Medoids - 27 Classes
#k-medoids
euc_pam <- pam(euc_dist, 24, diss = TRUE)
#centroids
euc_kmeans_centroids <- muskdata[euc_pam$medoids,]
#distance btw instances and centroids
euc_inst_dist_pam <- as.matrix(pdist(muskdata,euc_kmeans_centroids))
#bag distances to centroids
euc_bag_dist <- as.matrix(aggregate(euc_inst_dist_pam, list(muskId), mean))
train1 <- euc_bag_dist[index,2:ncol(euc_bag_dist)]
test1 <- euc_bag_dist[-index,2:ncol(euc_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#eucattan dist k-medoids
muskfit <- cv.glmnet(train1,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test1, type = "response", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, K-Medoids with Euclidean Distances, 24 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
comparison
## manh dist hierarchical 12
set.seed(10)
index <- sample(1:length(bag_classes), 20)
#create hierarchical clusters
manh_hclust <- hclust(manh_dist)
#determine classes
manh_classes <- cutree(manh_hclust,k=y)
#means are centers
manh_hclust_centers <- as.matrix(aggregate(muskdata,list(manh_classes),mean))
#find distances of each instance to class centers
manh_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,manh_hclust_centers))
#bag distances to centroids
manh_hclust_bag_dist <- as.matrix(aggregate(manh_inst_dist_mat_hclust, list(muskId), mean))
train4 <- manh_hclust_bag_dist[testindices,2:ncol(manh_hclust_bag_dist)]
test4 <- manh_hclust_bag_dist[-testindices,2:ncol(manh_hclust_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#manhattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "class", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, Hierarchical Clustering with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
## manh dist hierarchical 12
set.seed(10)
index <- sample(1:length(bag_classes), 20)
#create hierarchical clusters
manh_hclust <- hclust(manh_dist)
#determine classes
manh_classes <- cutree(manh_hclust,k=12)
#means are centers
manh_hclust_centers <- as.matrix(aggregate(muskdata,list(manh_classes),mean))
#find distances of each instance to class centers
manh_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,manh_hclust_centers))
#bag distances to centroids
manh_hclust_bag_dist <- as.matrix(aggregate(manh_inst_dist_mat_hclust, list(muskId), mean))
train4 <- manh_hclust_bag_dist[testindices,2:ncol(manh_hclust_bag_dist)]
test4 <- manh_hclust_bag_dist[-testindices,2:ncol(manh_hclust_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#manhattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "class", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, Hierarchical Clustering with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
## manh dist hierarchical 12
set.seed(10)
## manh dist hierarchical 12
set.seed(10)
index <- sample(1:length(bag_classes), 20)
#create hierarchical clusters
manh_hclust <- hclust(manh_dist)
#determine classes
manh_classes <- cutree(manh_hclust,k=12)
#means are centers
manh_hclust_centers <- as.matrix(aggregate(muskdata,list(manh_classes),mean))
#find distances of each instance to class centers
manh_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,manh_hclust_centers))
#bag distances to centroids
manh_hclust_bag_dist <- as.matrix(aggregate(manh_inst_dist_mat_hclust, list(muskId), mean))
train4 <- manh_hclust_bag_dist[index,2:ncol(manh_hclust_bag_dist)]
test4 <- manh_hclust_bag_dist[-index,2:ncol(manh_hclust_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#manhattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "class", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, Hierarchical Clustering with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
muskfit
musk_predict
#manhattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "response", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, Hierarchical Clustering with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
musk_predict
comparison
## euc dist hierarchical 12
set.seed(10)
index <- sample(1:length(bag_classes), 20)
#create hierarchical clusters
euc_hclust <- hclust(euc_dist)
#determine classes
euc_classes <- cutree(euc_hclust,k=12)
#means are centers
euc_hclust_centers <- as.matrix(aggregate(muskdata,list(euc_classes),mean))
#find distances of each instance to class centers
euc_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,euc_hclust_centers))
#bag distances to centroids
euc_hclust_bag_dist <- as.matrix(aggregate(euc_inst_dist_mat_hclust, list(muskId), mean))
train4 <- euc_hclust_bag_dist[index,2:ncol(euc_hclust_bag_dist)]
test4 <- euc_hclust_bag_dist[-index,2:ncol(euc_hclust_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#eucattan dist hierarchical
muskfit <- cv.glmnet(train4,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test4, type = "response", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, Hierarchical Clustering with eucattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
set.seed(10)
index <- sample(1:length(bag_classes), 20)
## Manhattan - K_Medoids - 27 Classes
#k-medoids
manh_pam <- pam(manh_dist, 27, diss = TRUE)
#centroids
manh_kmeans_centroids <- muskdata[manh_pam$medoids,]
#distance btw instances and centroids
manh_inst_dist_pam <- as.matrix(pdist(muskdata,manh_kmeans_centroids))
#bag distances to centroids
manh_bag_dist <- as.matrix(aggregate(manh_inst_dist_pam, list(muskId), mean))
train <- manh_bag_dist[index,2:ncol(manh_bag_dist)]
test <- manh_bag_dist[-index,2:ncol(manh_bag_dist)]
trainclass <- bag_classes[index]
testclass <- bag_classes[-index]
#manhattan dist k-medoids
muskfit <- cv.glmnet(train,trainclass, family = "binomial", nfolds=10)
musk_predict <- predict(muskfit, test, type = "response", s = "lambda.min")
perf <- performance(prediction(musk_predict,testclass), "tpr", "fpr")
auc <- performance(prediction(musk_predict,testclass), measure = "auc")
auc <- auc@y.values[[1]]
plot(perf, main = paste("ROC Curve, K-Medoids with Manhattan Distances, 27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
#k-medoids
euc_pam <- pam(euc_dist, 24, diss = TRUE)
#centroids
euc_kmeans_centroids <- muskdata[euc_pam$medoids,]
#distance btw instances and centroids
euc_inst_dist_pam <- as.matrix(pdist(muskdata,euc_kmeans_centroids))
#bag distances to centroids
euc_bag_dist <- as.matrix(aggregate(euc_inst_dist_pam, list(muskId), mean))
train2 <- euc_bag_dist[index,2:ncol(euc_bag_dist)]
test2 <- euc_bag_dist[-index,2:ncol(euc_bag_dist)]
trainclass2 <- bag_classes[index]
testclass2 <- bag_classes[-index]
#eucattan dist k-medoids
muskfit2 <- cv.glmnet(train2,trainclass2, family = "binomial", nfolds=10)
musk_predict2 <- predict(muskfit2, test2, type = "response", s = "lambda.min")
perf2 <- performance(prediction(musk_predict2,testclass2), "tpr", "fpr")
auc2 <- performance(prediction(musk_predict2,testclass2), measure = "auc")
auc2 <- auc2@y.values[[1]]
plot(perf, main = paste("ROC Curve, K-Medoids with Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
#create hierarchical clusters
manh_hclust <- hclust(manh_dist)
#determine classes
manh_classes <- cutree(manh_hclust,k=12)
#means are centers
manh_hclust_centers <- as.matrix(aggregate(muskdata,list(manh_classes),mean))
#find distances of each instance to class centers
manh_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,manh_hclust_centers))
#bag distances to centroids
manh_hclust_bag_dist <- as.matrix(aggregate(manh_inst_dist_mat_hclust, list(muskId), mean))
train3 <- manh_hclust_bag_dist[index,2:ncol(manh_hclust_bag_dist)]
test3 <- manh_hclust_bag_dist[-index,2:ncol(manh_hclust_bag_dist)]
trainclass3 <- bag_classes[index]
testclass3 <- bag_classes[-index]
#manhattan dist hierarchical
muskfit <- cv.glmnet(train3,trainclass3, family = "binomial", nfolds=10)
#manhattan dist hierarchical
muskfit3 <- cv.glmnet(train3,trainclass3, family = "binomial", nfolds=10)
musk_predict3 <- predict(muskfit, test3, type = "response", s = "lambda.min")
perf3 <- performance(prediction(musk_predict3,testclass3), "tpr", "fpr")
auc3 <- performance(prediction(musk_predict3,testclass3), measure = "auc")
auc3 <- auc3@y.values[[1]]
plot(perf3, main = paste("ROC Curve, Hierarchical Clustering with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc3), colorize = TRUE)
## euc dist hierarchical 12
set.seed(10)
#create hierarchical clusters
euc_hclust <- hclust(euc_dist)
#determine classes
euc_classes <- cutree(euc_hclust,k=12)
#means are centers
euc_hclust_centers <- as.matrix(aggregate(muskdata,list(euc_classes),mean))
#find distances of each instance to class centers
euc_inst_dist_mat_hclust <- as.matrix(pdist(muskdata,euc_hclust_centers))
#bag distances to centroids
euc_hclust_bag_dist <- as.matrix(aggregate(euc_inst_dist_mat_hclust, list(muskId), mean))
train4 <- euc_hclust_bag_dist[index,2:ncol(euc_hclust_bag_dist)]
test4 <- euc_hclust_bag_dist[-index,2:ncol(euc_hclust_bag_dist)]
trainclass4 <- bag_classes[index]
testclass4 <- bag_classes[-index]
#eucattan dist hierarchical
muskfit4 <- cv.glmnet(train4,trainclass4, family = "binomial", nfolds=10)
musk_predict4 <- predict(muskfit4, test4, type = "response", s = "lambda.min")
perf4 <- performance(prediction(musk_predict4,testclass4), "tpr", "fpr")
auc4 <- performance(prediction(musk_predict4,testclass4), measure = "auc")
auc4 <- auc4@y.values[[1]]
plot(perf4, main = paste("ROC Curve, Hierarchical Clustering with Euclidean Distances, 12 Clusters", "\n", "Area Under Curve = ", auc4), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with Manhattan Distances, 27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
lines(perf, main = paste("ROC Curve, K-Medoids with Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
par(mfrow = c(2,2))
plot(perf, main = paste("ROC Curve, K-Medoids with Manhattan Distances, 27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
plot(perf3, main = paste("ROC Curve, Hierarchical Clustering with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc3), colorize = TRUE)
plot(perf4, main = paste("ROC Curve, Hierarchical Clustering with Euclidean Distances, 12 Clusters", "\n", "Area Under Curve = ", auc4), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with","\n" ,"Manhattan Distances, 27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with","\n","Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
plot(perf3, main = paste("ROC Curve, Hierarchical Clustering","\n","with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc3), colorize = TRUE)
plot(perf4, main = paste("ROC Curve, Hierarchical Clustering","\n","with Euclidean Distances, 12 Clusters", "\n", "Area Under Curve = ", auc4), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with","\n" ,"Manhattan Distances,
27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
plot(perf2, main = paste("ROC Curve, K-Medoids with","\n","Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with","\n" ,"Manhattan Distances, 27 Clusters", "\n", "Area Under Curve = ", auc), colorize = TRUE)
plot(perf, main = paste("ROC Curve, K-Medoids with","\n" ,"Manhattan Distances, 27 Clusters",
"\n", "Area Under Curve = ", auc), colorize = TRUE)
plot(perf2, main = paste("ROC Curve, K-Medoids with","\n","Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
par(mfrow = c(2,2))
plot(perf, main = paste("ROC Curve, K-Medoids with","\n" ,"Manhattan Distances, 27 Clusters",
"\n", "Area Under Curve = ", auc), colorize = TRUE)
plot(perf2, main = paste("ROC Curve, K-Medoids with","\n","Euclidean Distances, 24 Clusters", "\n",
"Area Under Curve = ", auc2), colorize = TRUE)
plot(perf3, main = paste("ROC Curve, Hierarchical Clustering"
,"\n","with Manhattan Distances, 12 Clusters", "\n", "Area Under Curve = ", auc3), colorize = TRUE)
plot(perf4, main = paste("ROC Curve, Hierarchical Clustering"
,"\n","with Euclidean Distances, 12 Clusters", "\n", "Area Under Curve = ", auc4), colorize = TRUE)
comparison
